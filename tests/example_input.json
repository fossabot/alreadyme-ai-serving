{
  "githubOriginalUrl": "https://github.com/Delgan/loguru.git",
  "data": {
    "setup.py": "import re\n\ntry:\n    from setuptools import setup\nexcept ImportError:\n    from distutils.core import setup\n\nwith open(\"loguru/__init__.py\", \"r\") as file:\n    regex_version = r'^__version__\\s*=\\s*[\\'\"]([^\\'\"]*)[\\'\"]'\n    version = re.search(regex_version, file.read(), re.MULTILINE).group(1)\n\nwith open(\"README.rst\", \"rb\") as file:\n    readme = file.read().decode(\"utf-8\")\n\nsetup(\n    name=\"loguru\",\n    version=version,\n    packages=[\"loguru\"],\n    package_data={\"loguru\": [\"__init__.pyi\", \"py.typed\"]},\n    description=\"Python logging made (stupidly) simple\",\n    long_description=readme,\n    long_description_content_type=\"text/x-rst\",\n    author=\"Delgan\",\n    author_email=\"delgan.py@gmail.com\",\n    url=\"https://github.com/Delgan/loguru\",\n    download_url=\"https://github.com/Delgan/loguru/archive/{}.tar.gz\".format(version),\n    project_urls={\n        \"Changelog\": \"https://github.com/Delgan/loguru/blob/master/CHANGELOG.rst\",\n        \"Documentation\": \"https://loguru.readthedocs.io/en/stable/index.html\",\n    },\n    keywords=[\"loguru\", \"logging\", \"logger\", \"log\"],\n    license=\"MIT license\",\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Topic :: System :: Logging\",\n        \"Intended Audience :: Developers\",\n        \"Natural Language :: English\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3 :: Only\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n    ],\n    install_requires=[\n        \"colorama>=0.3.4 ; sys_platform=='win32'\",\n        \"aiocontextvars>=0.2.0 ; python_version<'3.7'\",\n        \"win32-setctime>=1.0.0 ; sys_platform=='win32'\",\n    ],\n    extras_require={\n        \"dev\": [\n            # Setup.\n            \"pre-commit==2.20.0 ; python_version>='3.7'\",\n            \"tox>=3.9.0\",\n            # Testing framework.\n            \"pytest>=4.6.2\",\n            \"pytest-cov>=2.7.1\",\n            \"pytest-mypy-plugins>=1.2.0 ; python_version>='3.6'\",\n            # Testing utils.\n            \"colorama>=0.3.4\",\n            \"freezegun>=1.1.0\",\n            \"mypy>=v0.910\",\n            # Docs.\n            \"Sphinx==5.2.3 ; python_version>='3.6'\",\n            \"sphinx-autobuild==2021.3.14 ; python_version>='3.6'\",\n            \"sphinx-rtd-theme==1.0.0 ; python_version>='3.6'\",\n            \"docutils==0.16 ; python_version>='3.6'\",\n        ]\n    },\n    python_requires=\">=3.5\",\n)\n",
    "loguru/_colorama.py": "import os\nimport sys\n\n\ndef should_colorize(stream):\n    if stream is None:\n        return False\n\n    if stream is sys.stdout or stream is sys.stderr:\n        try:\n            import ipykernel\n            import IPython\n\n            ipython = IPython.get_ipython()\n            is_jupyter_stream = isinstance(stream, ipykernel.iostream.OutStream)\n            is_jupyter_shell = isinstance(ipython, ipykernel.zmqshell.ZMQInteractiveShell)\n        except Exception:\n            pass\n        else:\n            if is_jupyter_stream and is_jupyter_shell:\n                return True\n\n    if stream is sys.__stdout__ or stream is sys.__stderr__:\n        if \"CI\" in os.environ and any(\n            ci in os.environ\n            for ci in [\"TRAVIS\", \"CIRCLECI\", \"APPVEYOR\", \"GITLAB_CI\", \"GITHUB_ACTIONS\"]\n        ):\n            return True\n        if \"PYCHARM_HOSTED\" in os.environ:\n            return True\n        if os.name == \"nt\" and \"TERM\" in os.environ:\n            return True\n\n    try:\n        return stream.isatty()\n    except Exception:\n        return False\n\n\ndef should_wrap(stream):\n    if os.name != \"nt\":\n        return False\n\n    if stream is not sys.__stdout__ and stream is not sys.__stderr__:\n        return False\n\n    from colorama.win32 import winapi_test\n\n    return winapi_test()\n\n\ndef wrap(stream):\n    from colorama import AnsiToWin32\n\n    return AnsiToWin32(stream, convert=True, strip=False, autoreset=False).stream\n",
    "loguru/_file_sink.py": "import datetime\nimport decimal\nimport glob\nimport numbers\nimport os\nimport shutil\nimport string\nfrom functools import partial\nfrom stat import ST_DEV, ST_INO\n\nfrom . import _string_parsers as string_parsers\nfrom ._ctime_functions import get_ctime, set_ctime\nfrom ._datetime import aware_now\n\n\ndef generate_rename_path(root, ext, creation_time):\n    creation_datetime = datetime.datetime.fromtimestamp(creation_time)\n    date = FileDateFormatter(creation_datetime)\n\n    renamed_path = \"{}.{}{}\".format(root, date, ext)\n    counter = 1\n\n    while os.path.exists(renamed_path):\n        counter += 1\n        renamed_path = \"{}.{}.{}{}\".format(root, date, counter, ext)\n\n    return renamed_path\n\n\nclass FileDateFormatter:\n    def __init__(self, datetime=None):\n        self.datetime = datetime or aware_now()\n\n    def __format__(self, spec):\n        if not spec:\n            spec = \"%Y-%m-%d_%H-%M-%S_%f\"\n        return self.datetime.__format__(spec)\n\n\nclass Compression:\n    @staticmethod\n    def add_compress(path_in, path_out, opener, **kwargs):\n        with opener(path_out, **kwargs) as f_comp:\n            f_comp.add(path_in, os.path.basename(path_in))\n\n    @staticmethod\n    def write_compress(path_in, path_out, opener, **kwargs):\n        with opener(path_out, **kwargs) as f_comp:\n            f_comp.write(path_in, os.path.basename(path_in))\n\n    @staticmethod\n    def copy_compress(path_in, path_out, opener, **kwargs):\n        with open(path_in, \"rb\") as f_in:\n            with opener(path_out, **kwargs) as f_out:\n                shutil.copyfileobj(f_in, f_out)\n\n    @staticmethod\n    def compression(path_in, ext, compress_function):\n        path_out = \"{}{}\".format(path_in, ext)\n\n        if os.path.exists(path_out):\n            creation_time = get_ctime(path_out)\n            root, ext_before = os.path.splitext(path_in)\n            renamed_path = generate_rename_path(root, ext_before + ext, creation_time)\n            os.rename(path_out, renamed_path)\n        compress_function(path_in, path_out)\n        os.remove(path_in)\n\n\nclass Retention:\n    @staticmethod\n    def retention_count(logs, number):\n        def key_log(log):\n            return (-os.stat(log).st_mtime, log)\n\n        for log in sorted(logs, key=key_log)[number:]:\n            os.remove(log)\n\n    @staticmethod\n    def retention_age(logs, seconds):\n        t = datetime.datetime.now().timestamp()\n        for log in logs:\n            if os.stat(log).st_mtime <= t - seconds:\n                os.remove(log)\n\n\nclass Rotation:\n    @staticmethod\n    def forward_day(t):\n        return t + datetime.timedelta(days=1)\n\n    @staticmethod\n    def forward_weekday(t, weekday):\n        while True:\n            t += datetime.timedelta(days=1)\n            if t.weekday() == weekday:\n                return t\n\n    @staticmethod\n    def forward_interval(t, interval):\n        return t + interval\n\n    @staticmethod\n    def rotation_size(message, file, size_limit):\n        file.seek(0, 2)\n        return file.tell() + len(message) > size_limit\n\n    class RotationTime:\n        def __init__(self, step_forward, time_init=None):\n            self._step_forward = step_forward\n            self._time_init = time_init\n            self._limit = None\n\n        def __call__(self, message, file):\n            if self._limit is None:\n                filepath = os.path.realpath(file.name)\n                creation_time = get_ctime(filepath)\n                set_ctime(filepath, creation_time)\n                start_time = limit = datetime.datetime.fromtimestamp(creation_time)\n                if self._time_init is not None:\n                    limit = limit.replace(\n                        hour=self._time_init.hour,\n                        minute=self._time_init.minute,\n                        second=self._time_init.second,\n                        microsecond=self._time_init.microsecond,\n                    )\n                if limit <= start_time:\n                    limit = self._step_forward(limit)\n                self._limit = limit\n\n            record_time = message.record[\"time\"].replace(tzinfo=None)\n            if record_time >= self._limit:\n                while self._limit <= record_time:\n                    self._limit = self._step_forward(self._limit)\n                return True\n            return False\n\n\nclass FileSink:\n    def __init__(\n        self,\n        path,\n        *,\n        rotation=None,\n        retention=None,\n        compression=None,\n        delay=False,\n        watch=False,\n        mode=\"a\",\n        buffering=1,\n        encoding=\"utf8\",\n        **kwargs\n    ):\n        self.encoding = encoding\n\n        self._kwargs = {**kwargs, \"mode\": mode, \"buffering\": buffering, \"encoding\": self.encoding}\n        self._path = str(path)\n\n        self._glob_patterns = self._make_glob_patterns(self._path)\n        self._rotation_function = self._make_rotation_function(rotation)\n        self._retention_function = self._make_retention_function(retention)\n        self._compression_function = self._make_compression_function(compression)\n\n        self._file = None\n        self._file_path = None\n\n        self._watch = watch\n        self._file_dev = -1\n        self._file_ino = -1\n\n        if not delay:\n            path = self._create_path()\n            self._create_dirs(path)\n            self._create_file(path)\n\n    def write(self, message):\n        if self._file is None:\n            path = self._create_path()\n            self._create_dirs(path)\n            self._create_file(path)\n\n        if self._watch:\n            self._reopen_if_needed()\n\n        if self._rotation_function is not None and self._rotation_function(message, self._file):\n            self._terminate_file(is_rotating=True)\n\n        self._file.write(message)\n\n    def stop(self):\n        if self._watch:\n            self._reopen_if_needed()\n\n        self._terminate_file(is_rotating=False)\n\n    async def complete(self):\n        pass\n\n    def _create_path(self):\n        path = self._path.format_map({\"time\": FileDateFormatter()})\n        return os.path.abspath(path)\n\n    def _create_dirs(self, path):\n        dirname = os.path.dirname(path)\n        os.makedirs(dirname, exist_ok=True)\n\n    def _create_file(self, path):\n        self._file = open(path, **self._kwargs)\n        self._file_path = path\n\n        if self._watch:\n            fileno = self._file.fileno()\n            result = os.fstat(fileno)\n            self._file_dev = result[ST_DEV]\n            self._file_ino = result[ST_INO]\n\n    def _close_file(self):\n        self._file.flush()\n        self._file.close()\n\n        self._file = None\n        self._file_path = None\n        self._file_dev = -1\n        self._file_ino = -1\n\n    def _reopen_if_needed(self):\n        # Implemented based on standard library:\n        # https://github.com/python/cpython/blob/cb589d1b/Lib/logging/handlers.py#L486\n        if not self._file:\n            return\n\n        filepath = self._file_path\n\n        try:\n            result = os.stat(filepath)\n        except FileNotFoundError:\n            result = None\n\n        if not result or result[ST_DEV] != self._file_dev or result[ST_INO] != self._file_ino:\n            self._close_file()\n            self._create_dirs(filepath)\n            self._create_file(filepath)\n\n    def _terminate_file(self, *, is_rotating=False):\n        old_path = self._file_path\n\n        if self._file is not None:\n            self._close_file()\n\n        if is_rotating:\n            new_path = self._create_path()\n            self._create_dirs(new_path)\n\n            if new_path == old_path:\n                creation_time = get_ctime(old_path)\n                root, ext = os.path.splitext(old_path)\n                renamed_path = generate_rename_path(root, ext, creation_time)\n                os.rename(old_path, renamed_path)\n                old_path = renamed_path\n\n        if is_rotating or self._rotation_function is None:\n            if self._compression_function is not None and old_path is not None:\n                self._compression_function(old_path)\n\n            if self._retention_function is not None:\n                logs = {\n                    file\n                    for pattern in self._glob_patterns\n                    for file in glob.glob(pattern)\n                    if os.path.isfile(file)\n                }\n                self._retention_function(list(logs))\n\n        if is_rotating:\n            self._create_file(new_path)\n            set_ctime(new_path, datetime.datetime.now().timestamp())\n\n    @staticmethod\n    def _make_glob_patterns(path):\n        formatter = string.Formatter()\n        tokens = formatter.parse(path)\n        escaped = \"\".join(glob.escape(text) + \"*\" * (name is not None) for text, name, *_ in tokens)\n\n        root, ext = os.path.splitext(escaped)\n\n        if not ext:\n            return [escaped, escaped + \".*\"]\n\n        return [escaped, escaped + \".*\", root + \".*\" + ext, root + \".*\" + ext + \".*\"]\n\n    @staticmethod\n    def _make_rotation_function(rotation):\n        if rotation is None:\n            return None\n        elif isinstance(rotation, str):\n            size = string_parsers.parse_size(rotation)\n            if size is not None:\n                return FileSink._make_rotation_function(size)\n            interval = string_parsers.parse_duration(rotation)\n            if interval is not None:\n                return FileSink._make_rotation_function(interval)\n            frequency = string_parsers.parse_frequency(rotation)\n            if frequency is not None:\n                return Rotation.RotationTime(frequency)\n            daytime = string_parsers.parse_daytime(rotation)\n            if daytime is not None:\n                day, time = daytime\n                if day is None:\n                    return FileSink._make_rotation_function(time)\n                if time is None:\n                    time = datetime.time(0, 0, 0)\n                step_forward = partial(Rotation.forward_weekday, weekday=day)\n                return Rotation.RotationTime(step_forward, time)\n            raise ValueError(\"Cannot parse rotation from: '%s'\" % rotation)\n        elif isinstance(rotation, (numbers.Real, decimal.Decimal)):\n            return partial(Rotation.rotation_size, size_limit=rotation)\n        elif isinstance(rotation, datetime.time):\n            return Rotation.RotationTime(Rotation.forward_day, rotation)\n        elif isinstance(rotation, datetime.timedelta):\n            step_forward = partial(Rotation.forward_interval, interval=rotation)\n            return Rotation.RotationTime(step_forward)\n        elif callable(rotation):\n            return rotation\n        else:\n            raise TypeError(\n                \"Cannot infer rotation for objects of type: '%s'\" % type(rotation).__name__\n            )\n\n    @staticmethod\n    def _make_retention_function(retention):\n        if retention is None:\n            return None\n        elif isinstance(retention, str):\n            interval = string_parsers.parse_duration(retention)\n            if interval is None:\n                raise ValueError(\"Cannot parse retention from: '%s'\" % retention)\n            return FileSink._make_retention_function(interval)\n        elif isinstance(retention, int):\n            return partial(Retention.retention_count, number=retention)\n        elif isinstance(retention, datetime.timedelta):\n            return partial(Retention.retention_age, seconds=retention.total_seconds())\n        elif callable(retention):\n            return retention\n        else:\n            raise TypeError(\n                \"Cannot infer retention for objects of type: '%s'\" % type(retention).__name__\n            )\n\n    @staticmethod\n    def _make_compression_function(compression):\n        if compression is None:\n            return None\n        elif isinstance(compression, str):\n            ext = compression.strip().lstrip(\".\")\n\n            if ext == \"gz\":\n                import gzip\n\n                compress = partial(Compression.copy_compress, opener=gzip.open, mode=\"wb\")\n            elif ext == \"bz2\":\n                import bz2\n\n                compress = partial(Compression.copy_compress, opener=bz2.open, mode=\"wb\")\n\n            elif ext == \"xz\":\n                import lzma\n\n                compress = partial(\n                    Compression.copy_compress, opener=lzma.open, mode=\"wb\", format=lzma.FORMAT_XZ\n                )\n\n            elif ext == \"lzma\":\n                import lzma\n\n                compress = partial(\n                    Compression.copy_compress, opener=lzma.open, mode=\"wb\", format=lzma.FORMAT_ALONE\n                )\n            elif ext == \"tar\":\n                import tarfile\n\n                compress = partial(Compression.add_compress, opener=tarfile.open, mode=\"w:\")\n            elif ext == \"tar.gz\":\n                import gzip\n                import tarfile\n\n                compress = partial(Compression.add_compress, opener=tarfile.open, mode=\"w:gz\")\n            elif ext == \"tar.bz2\":\n                import bz2\n                import tarfile\n\n                compress = partial(Compression.add_compress, opener=tarfile.open, mode=\"w:bz2\")\n\n            elif ext == \"tar.xz\":\n                import lzma\n                import tarfile\n\n                compress = partial(Compression.add_compress, opener=tarfile.open, mode=\"w:xz\")\n            elif ext == \"zip\":\n                import zipfile\n\n                compress = partial(\n                    Compression.write_compress,\n                    opener=zipfile.ZipFile,\n                    mode=\"w\",\n                    compression=zipfile.ZIP_DEFLATED,\n                )\n            else:\n                raise ValueError(\"Invalid compression format: '%s'\" % ext)\n\n            return partial(Compression.compression, ext=\".\" + ext, compress_function=compress)\n        elif callable(compression):\n            return compression\n        else:\n            raise TypeError(\n                \"Cannot infer compression for objects of type: '%s'\" % type(compression).__name__\n            )\n",
    "loguru/_better_exceptions.py": "import builtins\nimport inspect\nimport io\nimport keyword\nimport linecache\nimport os\nimport re\nimport sys\nimport sysconfig\nimport tokenize\nimport traceback\n\n\nclass SyntaxHighlighter:\n\n    _default_style = {\n        \"comment\": \"\\x1b[30m\\x1b[1m{}\\x1b[0m\",\n        \"keyword\": \"\\x1b[35m\\x1b[1m{}\\x1b[0m\",\n        \"builtin\": \"\\x1b[1m{}\\x1b[0m\",\n        \"string\": \"\\x1b[36m{}\\x1b[0m\",\n        \"number\": \"\\x1b[34m\\x1b[1m{}\\x1b[0m\",\n        \"operator\": \"\\x1b[35m\\x1b[1m{}\\x1b[0m\",\n        \"punctuation\": \"\\x1b[1m{}\\x1b[0m\",\n        \"constant\": \"\\x1b[36m\\x1b[1m{}\\x1b[0m\",\n        \"identifier\": \"\\x1b[1m{}\\x1b[0m\",\n        \"other\": \"{}\",\n    }\n\n    _builtins = set(dir(builtins))\n    _constants = {\"True\", \"False\", \"None\"}\n    _punctation = {\"(\", \")\", \"[\", \"]\", \"{\", \"}\", \":\", \",\", \";\"}\n\n    def __init__(self, style=None):\n        self._style = style or self._default_style\n\n    def highlight(self, source):\n        style = self._style\n        row, column = 0, 0\n        output = \"\"\n\n        for token in self.tokenize(source):\n            type_, string, start, end, line = token\n\n            if type_ == tokenize.NAME:\n                if string in self._constants:\n                    color = style[\"constant\"]\n                elif keyword.iskeyword(string):\n                    color = style[\"keyword\"]\n                elif string in self._builtins:\n                    color = style[\"builtin\"]\n                else:\n                    color = style[\"identifier\"]\n            elif type_ == tokenize.OP:\n                if string in self._punctation:\n                    color = style[\"punctuation\"]\n                else:\n                    color = style[\"operator\"]\n            elif type_ == tokenize.NUMBER:\n                color = style[\"number\"]\n            elif type_ == tokenize.STRING:\n                color = style[\"string\"]\n            elif type_ == tokenize.COMMENT:\n                color = style[\"comment\"]\n            else:\n                color = style[\"other\"]\n\n            start_row, start_column = start\n            _, end_column = end\n\n            if start_row != row:\n                source = source[:column]\n                row, column = start_row, 0\n\n            if type_ != tokenize.ENCODING:\n                output += line[column:start_column]\n                output += color.format(string)\n\n            column = end_column\n\n        output += source[column:]\n\n        return output\n\n    @staticmethod\n    def tokenize(source):\n        # Worth reading: https://www.asmeurer.com/brown-water-python/\n        source = source.encode(\"utf-8\")\n        source = io.BytesIO(source)\n\n        try:\n            yield from tokenize.tokenize(source.readline)\n        except tokenize.TokenError:\n            return\n\n\nclass ExceptionFormatter:\n\n    _default_theme = {\n        \"introduction\": \"\\x1b[33m\\x1b[1m{}\\x1b[0m\",\n        \"cause\": \"\\x1b[1m{}\\x1b[0m\",\n        \"context\": \"\\x1b[1m{}\\x1b[0m\",\n        \"dirname\": \"\\x1b[32m{}\\x1b[0m\",\n        \"basename\": \"\\x1b[32m\\x1b[1m{}\\x1b[0m\",\n        \"line\": \"\\x1b[33m{}\\x1b[0m\",\n        \"function\": \"\\x1b[35m{}\\x1b[0m\",\n        \"exception_type\": \"\\x1b[31m\\x1b[1m{}\\x1b[0m\",\n        \"exception_value\": \"\\x1b[1m{}\\x1b[0m\",\n        \"arrows\": \"\\x1b[36m{}\\x1b[0m\",\n        \"value\": \"\\x1b[36m\\x1b[1m{}\\x1b[0m\",\n    }\n\n    def __init__(\n        self,\n        colorize=False,\n        backtrace=False,\n        diagnose=True,\n        theme=None,\n        style=None,\n        max_length=128,\n        encoding=\"ascii\",\n        hidden_frames_filename=None,\n        prefix=\"\",\n    ):\n        self._colorize = colorize\n        self._diagnose = diagnose\n        self._theme = theme or self._default_theme\n        self._backtrace = backtrace\n        self._syntax_highlighter = SyntaxHighlighter(style)\n        self._max_length = max_length\n        self._encoding = encoding\n        self._hidden_frames_filename = hidden_frames_filename\n        self._prefix = prefix\n        self._lib_dirs = self._get_lib_dirs()\n        self._pipe_char = self._get_char(\"\\u2502\", \"|\")\n        self._cap_char = self._get_char(\"\\u2514\", \"->\")\n        self._catch_point_identifier = \" <Loguru catch point here>\"\n\n    @staticmethod\n    def _get_lib_dirs():\n        schemes = sysconfig.get_scheme_names()\n        names = [\"stdlib\", \"platstdlib\", \"platlib\", \"purelib\"]\n        paths = {sysconfig.get_path(name, scheme) for scheme in schemes for name in names}\n        return [os.path.abspath(path).lower() + os.sep for path in paths if path in sys.path]\n\n    def _get_char(self, char, default):\n        try:\n            char.encode(self._encoding)\n        except (UnicodeEncodeError, LookupError):\n            return default\n        else:\n            return char\n\n    def _is_file_mine(self, file):\n        filepath = os.path.abspath(file).lower()\n        if not filepath.endswith(\".py\"):\n            return False\n        return not any(filepath.startswith(d) for d in self._lib_dirs)\n\n    def _extract_frames(self, tb, is_first, *, limit=None, from_decorator=False):\n        frames, final_source = [], None\n\n        if tb is None or (limit is not None and limit <= 0):\n            return frames, final_source\n\n        def is_valid(frame):\n            return frame.f_code.co_filename != self._hidden_frames_filename\n\n        def get_info(frame, lineno):\n            filename = frame.f_code.co_filename\n            function = frame.f_code.co_name\n            source = linecache.getline(filename, lineno).strip()\n            return filename, lineno, function, source\n\n        infos = []\n\n        if is_valid(tb.tb_frame):\n            infos.append((get_info(tb.tb_frame, tb.tb_lineno), tb.tb_frame))\n\n        get_parent_only = from_decorator and not self._backtrace\n\n        if (self._backtrace and is_first) or get_parent_only:\n            frame = tb.tb_frame.f_back\n            while frame:\n                if is_valid(frame):\n                    infos.insert(0, (get_info(frame, frame.f_lineno), frame))\n                    if get_parent_only:\n                        break\n                frame = frame.f_back\n\n            if infos and not get_parent_only:\n                (filename, lineno, function, source), frame = infos[-1]\n                function += self._catch_point_identifier\n                infos[-1] = ((filename, lineno, function, source), frame)\n\n        tb = tb.tb_next\n\n        while tb:\n            if is_valid(tb.tb_frame):\n                infos.append((get_info(tb.tb_frame, tb.tb_lineno), tb.tb_frame))\n            tb = tb.tb_next\n\n        if limit is not None:\n            infos = infos[-limit:]\n\n        for (filename, lineno, function, source), frame in infos:\n            final_source = source\n            if source:\n                colorize = self._colorize and self._is_file_mine(filename)\n                lines = []\n                if colorize:\n                    lines.append(self._syntax_highlighter.highlight(source))\n                else:\n                    lines.append(source)\n                if self._diagnose:\n                    relevant_values = self._get_relevant_values(source, frame)\n                    values = self._format_relevant_values(list(relevant_values), colorize)\n                    lines += list(values)\n                source = \"\\n    \".join(lines)\n            frames.append((filename, lineno, function, source))\n\n        return frames, final_source\n\n    def _get_relevant_values(self, source, frame):\n        value = None\n        pending = None\n        is_attribute = False\n        is_valid_value = False\n        is_assignment = True\n\n        for token in self._syntax_highlighter.tokenize(source):\n            type_, string, (_, col), *_ = token\n\n            if pending is not None:\n                # Keyword arguments are ignored\n                if type_ != tokenize.OP or string != \"=\" or is_assignment:\n                    yield pending\n                pending = None\n\n            if type_ == tokenize.NAME and not keyword.iskeyword(string):\n                if not is_attribute:\n                    for variables in (frame.f_locals, frame.f_globals):\n                        try:\n                            value = variables[string]\n                        except KeyError:\n                            continue\n                        else:\n                            is_valid_value = True\n                            pending = (col, self._format_value(value))\n                            break\n                elif is_valid_value:\n                    try:\n                        value = inspect.getattr_static(value, string)\n                    except AttributeError:\n                        is_valid_value = False\n                    else:\n                        yield (col, self._format_value(value))\n            elif type_ == tokenize.OP and string == \".\":\n                is_attribute = True\n                is_assignment = False\n            elif type_ == tokenize.OP and string == \";\":\n                is_assignment = True\n                is_attribute = False\n                is_valid_value = False\n            else:\n                is_attribute = False\n                is_valid_value = False\n                is_assignment = False\n\n        if pending is not None:\n            yield pending\n\n    def _format_relevant_values(self, relevant_values, colorize):\n        for i in reversed(range(len(relevant_values))):\n            col, value = relevant_values[i]\n            pipe_cols = [pcol for pcol, _ in relevant_values[:i]]\n            pre_line = \"\"\n            index = 0\n\n            for pc in pipe_cols:\n                pre_line += (\" \" * (pc - index)) + self._pipe_char\n                index = pc + 1\n\n            pre_line += \" \" * (col - index)\n            value_lines = value.split(\"\\n\")\n\n            for n, value_line in enumerate(value_lines):\n                if n == 0:\n                    arrows = pre_line + self._cap_char + \" \"\n                else:\n                    arrows = pre_line + \" \" * (len(self._cap_char) + 1)\n\n                if colorize:\n                    arrows = self._theme[\"arrows\"].format(arrows)\n                    value_line = self._theme[\"value\"].format(value_line)\n\n                yield arrows + value_line\n\n    def _format_value(self, v):\n        try:\n            v = repr(v)\n        except Exception:\n            v = \"<unprintable %s object>\" % type(v).__name__\n\n        max_length = self._max_length\n        if max_length is not None and len(v) > max_length:\n            v = v[: max_length - 3] + \"...\"\n        return v\n\n    def _format_locations(self, frames_lines, *, has_introduction):\n        prepend_with_new_line = has_introduction\n        regex = r'^  File \"(?P<file>.*?)\", line (?P<line>[^,]+)(?:, in (?P<function>.*))?\\n'\n\n        for frame in frames_lines:\n            match = re.match(regex, frame)\n\n            if match:\n                file, line, function = match.group(\"file\", \"line\", \"function\")\n\n                is_mine = self._is_file_mine(file)\n\n                if function is not None:\n                    pattern = '  File \"{}\", line {}, in {}\\n'\n                else:\n                    pattern = '  File \"{}\", line {}\\n'\n\n                if self._backtrace and function and function.endswith(self._catch_point_identifier):\n                    function = function[: -len(self._catch_point_identifier)]\n                    pattern = \">\" + pattern[1:]\n\n                if self._colorize and is_mine:\n                    dirname, basename = os.path.split(file)\n                    if dirname:\n                        dirname += os.sep\n                    dirname = self._theme[\"dirname\"].format(dirname)\n                    basename = self._theme[\"basename\"].format(basename)\n                    file = dirname + basename\n                    line = self._theme[\"line\"].format(line)\n                    function = self._theme[\"function\"].format(function)\n\n                if self._diagnose and (is_mine or prepend_with_new_line):\n                    pattern = \"\\n\" + pattern\n\n                location = pattern.format(file, line, function)\n                frame = location + frame[match.end() :]\n                prepend_with_new_line = is_mine\n\n            yield frame\n\n    def _format_exception(self, value, tb, *, seen=None, is_first=False, from_decorator=False):\n        # Implemented from built-in traceback module:\n        # https://github.com/python/cpython/blob/a5b76167/Lib/traceback.py#L468\n        exc_type, exc_value, exc_traceback = type(value), value, tb\n\n        if seen is None:\n            seen = set()\n\n        seen.add(id(exc_value))\n\n        if exc_value:\n            if exc_value.__cause__ is not None and id(exc_value.__cause__) not in seen:\n                for text in self._format_exception(\n                    exc_value.__cause__, exc_value.__cause__.__traceback__, seen=seen\n                ):\n                    yield text\n                cause = \"The above exception was the direct cause of the following exception:\"\n                if self._colorize:\n                    cause = self._theme[\"cause\"].format(cause)\n                if self._diagnose:\n                    yield \"\\n\\n\" + cause + \"\\n\\n\\n\"\n                else:\n                    yield \"\\n\" + cause + \"\\n\\n\"\n\n            elif (\n                exc_value.__context__ is not None\n                and id(exc_value.__context__) not in seen\n                and not exc_value.__suppress_context__\n            ):\n                for text in self._format_exception(\n                    exc_value.__context__, exc_value.__context__.__traceback__, seen=seen\n                ):\n                    yield text\n                context = \"During handling of the above exception, another exception occurred:\"\n                if self._colorize:\n                    context = self._theme[\"context\"].format(context)\n                if self._diagnose:\n                    yield \"\\n\\n\" + context + \"\\n\\n\\n\"\n                else:\n                    yield \"\\n\" + context + \"\\n\\n\"\n\n        try:\n            tracebacklimit = sys.tracebacklimit\n        except AttributeError:\n            tracebacklimit = None\n\n        frames, final_source = self._extract_frames(\n            exc_traceback, is_first, limit=tracebacklimit, from_decorator=from_decorator\n        )\n        exception_only = traceback.format_exception_only(exc_type, exc_value)\n\n        error_message = exception_only[-1][:-1]  # Remove last new line temporarily\n\n        if self._colorize:\n            if \":\" in error_message:\n                exception_type, exception_value = error_message.split(\":\", 1)\n                exception_type = self._theme[\"exception_type\"].format(exception_type)\n                exception_value = self._theme[\"exception_value\"].format(exception_value)\n                error_message = exception_type + \":\" + exception_value\n            else:\n                error_message = self._theme[\"exception_type\"].format(error_message)\n\n        if self._diagnose and frames:\n            if issubclass(exc_type, AssertionError) and not str(exc_value) and final_source:\n                if self._colorize:\n                    final_source = self._syntax_highlighter.highlight(final_source)\n                error_message += \": \" + final_source\n\n            error_message = \"\\n\" + error_message\n\n        exception_only[-1] = error_message + \"\\n\"\n\n        frames_lines = traceback.format_list(frames) + exception_only\n        has_introduction = bool(frames)\n\n        if self._colorize or self._backtrace or self._diagnose:\n            frames_lines = self._format_locations(frames_lines, has_introduction=has_introduction)\n\n        if is_first:\n            yield self._prefix\n\n        if has_introduction:\n            introduction = \"Traceback (most recent call last):\"\n            if self._colorize:\n                introduction = self._theme[\"introduction\"].format(introduction)\n            yield introduction + \"\\n\"\n\n        yield \"\".join(frames_lines)\n\n    def format_exception(self, type_, value, tb, *, from_decorator=False):\n        yield from self._format_exception(value, tb, is_first=True, from_decorator=from_decorator)\n",
    "loguru/_recattrs.py": "import pickle\nfrom collections import namedtuple\n\n\nclass RecordLevel:\n    __slots__ = (\"name\", \"no\", \"icon\")\n\n    def __init__(self, name, no, icon):\n        self.name = name\n        self.no = no\n        self.icon = icon\n\n    def __repr__(self):\n        return \"(name=%r, no=%r, icon=%r)\" % (self.name, self.no, self.icon)\n\n    def __format__(self, spec):\n        return self.name.__format__(spec)\n\n\nclass RecordFile:\n    __slots__ = (\"name\", \"path\")\n\n    def __init__(self, name, path):\n        self.name = name\n        self.path = path\n\n    def __repr__(self):\n        return \"(name=%r, path=%r)\" % (self.name, self.path)\n\n    def __format__(self, spec):\n        return self.name.__format__(spec)\n\n\nclass RecordThread:\n    __slots__ = (\"id\", \"name\")\n\n    def __init__(self, id_, name):\n        self.id = id_\n        self.name = name\n\n    def __repr__(self):\n        return \"(id=%r, name=%r)\" % (self.id, self.name)\n\n    def __format__(self, spec):\n        return self.id.__format__(spec)\n\n\nclass RecordProcess:\n    __slots__ = (\"id\", \"name\")\n\n    def __init__(self, id_, name):\n        self.id = id_\n        self.name = name\n\n    def __repr__(self):\n        return \"(id=%r, name=%r)\" % (self.id, self.name)\n\n    def __format__(self, spec):\n        return self.id.__format__(spec)\n\n\nclass RecordException(namedtuple(\"RecordException\", (\"type\", \"value\", \"traceback\"))):\n    def __repr__(self):\n        return \"(type=%r, value=%r, traceback=%r)\" % (self.type, self.value, self.traceback)\n\n    def __reduce__(self):\n        # The traceback is not picklable so we need to remove it. Also, some custom exception\n        # values aren't picklable either. For user convenience, we try first to serialize it and\n        # we remove the value in case or error. As an optimization, we could have re-used the\n        # dumped value during unpickling, but this requires using \"pickle.loads()\" which is\n        # flagged as insecure by some security tools.\n        try:\n            pickle.dumps(self.value)\n        except pickle.PickleError:\n            return (RecordException, (self.type, None, None))\n        else:\n            return (RecordException, (self.type, self.value, None))\n",
    "loguru/_logger.py": "\"\"\"\n.. References and links rendered by Sphinx are kept here as \"module documentation\" so that they can\n   be used in the ``Logger`` docstrings but do not pollute ``help(logger)`` output.\n\n.. |Logger| replace:: :class:`~Logger`\n.. |add| replace:: :meth:`~Logger.add()`\n.. |remove| replace:: :meth:`~Logger.remove()`\n.. |complete| replace:: :meth:`~Logger.complete()`\n.. |catch| replace:: :meth:`~Logger.catch()`\n.. |bind| replace:: :meth:`~Logger.bind()`\n.. |contextualize| replace:: :meth:`~Logger.contextualize()`\n.. |patch| replace:: :meth:`~Logger.patch()`\n.. |opt| replace:: :meth:`~Logger.opt()`\n.. |log| replace:: :meth:`~Logger.log()`\n.. |level| replace:: :meth:`~Logger.level()`\n.. |enable| replace:: :meth:`~Logger.enable()`\n.. |disable| replace:: :meth:`~Logger.disable()`\n\n.. |Any| replace:: :obj:`~typing.Any`\n.. |str| replace:: :class:`str`\n.. |int| replace:: :class:`int`\n.. |bool| replace:: :class:`bool`\n.. |tuple| replace:: :class:`tuple`\n.. |namedtuple| replace:: :func:`namedtuple<collections.namedtuple>`\n.. |list| replace:: :class:`list`\n.. |dict| replace:: :class:`dict`\n.. |str.format| replace:: :meth:`str.format()`\n.. |Path| replace:: :class:`pathlib.Path`\n.. |match.groupdict| replace:: :meth:`re.Match.groupdict()`\n.. |Handler| replace:: :class:`logging.Handler`\n.. |sys.stderr| replace:: :data:`sys.stderr`\n.. |sys.exc_info| replace:: :func:`sys.exc_info()`\n.. |time| replace:: :class:`datetime.time`\n.. |datetime| replace:: :class:`datetime.datetime`\n.. |timedelta| replace:: :class:`datetime.timedelta`\n.. |open| replace:: :func:`open()`\n.. |logging| replace:: :mod:`logging`\n.. |signal| replace:: :mod:`signal`\n.. |contextvars| replace:: :mod:`contextvars`\n.. |Thread.run| replace:: :meth:`Thread.run()<threading.Thread.run()>`\n.. |Exception| replace:: :class:`Exception`\n.. |AbstractEventLoop| replace:: :class:`AbstractEventLoop<asyncio.AbstractEventLoop>`\n.. |asyncio.get_running_loop| replace:: :func:`asyncio.get_running_loop()`\n.. |asyncio.run| replace:: :func:`asyncio.run()`\n.. |loop.run_until_complete| replace::\n    :meth:`loop.run_until_complete()<asyncio.loop.run_until_complete()>`\n.. |loop.create_task| replace:: :meth:`loop.create_task()<asyncio.loop.create_task()>`\n\n.. |logger.trace| replace:: :meth:`logger.trace()<Logger.trace()>`\n.. |logger.debug| replace:: :meth:`logger.debug()<Logger.debug()>`\n.. |logger.info| replace:: :meth:`logger.info()<Logger.info()>`\n.. |logger.success| replace:: :meth:`logger.success()<Logger.success()>`\n.. |logger.warning| replace:: :meth:`logger.warning()<Logger.warning()>`\n.. |logger.error| replace:: :meth:`logger.error()<Logger.error()>`\n.. |logger.critical| replace:: :meth:`logger.critical()<Logger.critical()>`\n\n.. |file-like object| replace:: ``file-like object``\n.. _file-like object: https://docs.python.org/3/glossary.html#term-file-object\n.. |callable| replace:: ``callable``\n.. _callable: https://docs.python.org/3/library/functions.html#callable\n.. |coroutine function| replace:: ``coroutine function``\n.. _coroutine function: https://docs.python.org/3/glossary.html#term-coroutine-function\n.. |re.Pattern| replace:: ``re.Pattern``\n.. _re.Pattern: https://docs.python.org/3/library/re.html#re-objects\n\n.. |better_exceptions| replace:: ``better_exceptions``\n.. _better_exceptions: https://github.com/Qix-/better-exceptions\n\n.. _Pendulum: https://pendulum.eustace.io/docs/#tokens\n.. _@sdispater: https://github.com/sdispater\n.. _@Qix-: https://github.com/Qix-\n.. _formatting directives: https://docs.python.org/3/library/string.html#format-string-syntax\n.. _reentrant: https://en.wikipedia.org/wiki/Reentrancy_(computing)\n\"\"\"\nimport builtins\nimport contextlib\nimport functools\nimport itertools\nimport logging\nimport re\nimport sys\nimport warnings\nfrom collections import namedtuple\nfrom inspect import isclass, iscoroutinefunction, isgeneratorfunction\nfrom multiprocessing import current_process\nfrom os.path import basename, splitext\nfrom threading import current_thread\n\nfrom . import _asyncio_loop, _colorama, _defaults, _filters\nfrom ._better_exceptions import ExceptionFormatter\nfrom ._colorizer import Colorizer\nfrom ._contextvars import ContextVar\nfrom ._datetime import aware_now\nfrom ._error_interceptor import ErrorInterceptor\nfrom ._file_sink import FileSink\nfrom ._get_frame import get_frame\nfrom ._handler import Handler\nfrom ._locks_machinery import create_logger_lock\nfrom ._recattrs import RecordException, RecordFile, RecordLevel, RecordProcess, RecordThread\nfrom ._simple_sinks import AsyncSink, CallableSink, StandardSink, StreamSink\n\nif sys.version_info >= (3, 6):\n    from os import PathLike\nelse:\n    from pathlib import PurePath as PathLike\n\n\nLevel = namedtuple(\"Level\", [\"name\", \"no\", \"color\", \"icon\"])\n\nstart_time = aware_now()\n\ncontext = ContextVar(\"loguru_context\", default={})\n\n\nclass Core:\n    def __init__(self):\n        levels = [\n            Level(\n                \"TRACE\",\n                _defaults.LOGURU_TRACE_NO,\n                _defaults.LOGURU_TRACE_COLOR,\n                _defaults.LOGURU_TRACE_ICON,\n            ),\n            Level(\n                \"DEBUG\",\n                _defaults.LOGURU_DEBUG_NO,\n                _defaults.LOGURU_DEBUG_COLOR,\n                _defaults.LOGURU_DEBUG_ICON,\n            ),\n            Level(\n                \"INFO\",\n                _defaults.LOGURU_INFO_NO,\n                _defaults.LOGURU_INFO_COLOR,\n                _defaults.LOGURU_INFO_ICON,\n            ),\n            Level(\n                \"SUCCESS\",\n                _defaults.LOGURU_SUCCESS_NO,\n                _defaults.LOGURU_SUCCESS_COLOR,\n                _defaults.LOGURU_SUCCESS_ICON,\n            ),\n            Level(\n                \"WARNING\",\n                _defaults.LOGURU_WARNING_NO,\n                _defaults.LOGURU_WARNING_COLOR,\n                _defaults.LOGURU_WARNING_ICON,\n            ),\n            Level(\n                \"ERROR\",\n                _defaults.LOGURU_ERROR_NO,\n                _defaults.LOGURU_ERROR_COLOR,\n                _defaults.LOGURU_ERROR_ICON,\n            ),\n            Level(\n                \"CRITICAL\",\n                _defaults.LOGURU_CRITICAL_NO,\n                _defaults.LOGURU_CRITICAL_COLOR,\n                _defaults.LOGURU_CRITICAL_ICON,\n            ),\n        ]\n        self.levels = {level.name: level for level in levels}\n        self.levels_ansi_codes = {\n            name: Colorizer.ansify(level.color) for name, level in self.levels.items()\n        }\n        self.levels_ansi_codes[None] = \"\"\n\n        self.handlers_count = itertools.count()\n        self.handlers = {}\n\n        self.extra = {}\n        self.patcher = None\n\n        self.min_level = float(\"inf\")\n        self.enabled = {}\n        self.activation_list = []\n        self.activation_none = True\n\n        self.lock = create_logger_lock()\n\n    def __getstate__(self):\n        state = self.__dict__.copy()\n        state[\"lock\"] = None\n        return state\n\n    def __setstate__(self, state):\n        self.__dict__.update(state)\n        self.lock = create_logger_lock()\n\n\nclass Logger:\n    \"\"\"An object to dispatch logging messages to configured handlers.\n\n    The |Logger| is the core object of ``loguru``, every logging configuration and usage pass\n    through a call to one of its methods. There is only one logger, so there is no need to retrieve\n    one before usage.\n\n    Once the ``logger`` is imported, it can be used to write messages about events happening in your\n    code. By reading the output logs of your application, you gain a better understanding of the\n    flow of your program and you more easily track and debug unexpected behaviors.\n\n    Handlers to which the logger sends log messages are added using the |add| method. Note that you\n    can use the |Logger| right after import as it comes pre-configured (logs are emitted to\n    |sys.stderr| by default). Messages can be logged with different severity levels and they can be\n    formatted using curly braces (it uses |str.format| under the hood).\n\n    When a message is logged, a \"record\" is associated with it. This record is a dict which contains\n    information about the logging context: time, function, file, line, thread, level... It also\n    contains the ``__name__`` of the module, this is why you don't need named loggers.\n\n    You should not instantiate a |Logger| by yourself, use ``from loguru import logger`` instead.\n    \"\"\"\n\n    def __init__(self, core, exception, depth, record, lazy, colors, raw, capture, patchers, extra):\n        self._core = core\n        self._options = (exception, depth, record, lazy, colors, raw, capture, patchers, extra)\n\n    def __repr__(self):\n        return \"<loguru.logger handlers=%r>\" % list(self._core.handlers.values())\n\n    def add(\n        self,\n        sink,\n        *,\n        level=_defaults.LOGURU_LEVEL,\n        format=_defaults.LOGURU_FORMAT,\n        filter=_defaults.LOGURU_FILTER,\n        colorize=_defaults.LOGURU_COLORIZE,\n        serialize=_defaults.LOGURU_SERIALIZE,\n        backtrace=_defaults.LOGURU_BACKTRACE,\n        diagnose=_defaults.LOGURU_DIAGNOSE,\n        enqueue=_defaults.LOGURU_ENQUEUE,\n        catch=_defaults.LOGURU_CATCH,\n        **kwargs\n    ):\n        r\"\"\"Add a handler sending log messages to a sink adequately configured.\n\n        Parameters\n        ----------\n        sink : |file-like object|_, |str|, |Path|, |callable|_, |coroutine function|_ or |Handler|\n            An object in charge of receiving formatted logging messages and propagating them to an\n            appropriate endpoint.\n        level : |int| or |str|, optional\n            The minimum severity level from which logged messages should be sent to the sink.\n        format : |str| or |callable|_, optional\n            The template used to format logged messages before being sent to the sink.\n        filter : |callable|_, |str| or |dict|, optional\n            A directive optionally used to decide for each logged message whether it should be sent\n            to the sink or not.\n        colorize : |bool|, optional\n            Whether the color markups contained in the formatted message should be converted to ansi\n            codes for terminal coloration, or stripped otherwise. If ``None``, the choice is\n            automatically made based on the sink being a tty or not.\n        serialize : |bool|, optional\n            Whether the logged message and its records should be first converted to a JSON string\n            before being sent to the sink.\n        backtrace : |bool|, optional\n            Whether the exception trace formatted should be extended upward, beyond the catching\n            point, to show the full stacktrace which generated the error.\n        diagnose : |bool|, optional\n            Whether the exception trace should display the variables values to eases the debugging.\n            This should be set to ``False`` in production to avoid leaking sensitive data.\n        enqueue : |bool|, optional\n            Whether the messages to be logged should first pass through a multiprocess-safe queue\n            before reaching the sink. This is useful while logging to a file through multiple\n            processes. This also has the advantage of making logging calls non-blocking.\n        catch : |bool|, optional\n            Whether errors occurring while sink handles logs messages should be automatically\n            caught. If ``True``, an exception message is displayed on |sys.stderr| but the exception\n            is not propagated to the caller, preventing your app to crash.\n        **kwargs\n            Additional parameters that are only valid to configure a coroutine or file sink (see\n            below).\n\n\n        If and only if the sink is a coroutine function, the following parameter applies:\n\n        Parameters\n        ----------\n        loop : |AbstractEventLoop|, optional\n            The event loop in which the asynchronous logging task will be scheduled and executed. If\n            ``None``, the loop used is the one returned by |asyncio.get_running_loop| at the time of\n            the logging call (task is discarded if there is no loop currently running).\n\n\n        If and only if the sink is a file path, the following parameters apply:\n\n        Parameters\n        ----------\n        rotation : |str|, |int|, |time|, |timedelta| or |callable|_, optional\n            A condition indicating whenever the current logged file should be closed and a new one\n            started.\n        retention : |str|, |int|, |timedelta| or |callable|_, optional\n            A directive filtering old files that should be removed during rotation or end of\n            program.\n        compression : |str| or |callable|_, optional\n            A compression or archive format to which log files should be converted at closure.\n        delay : |bool|, optional\n            Whether the file should be created as soon as the sink is configured, or delayed until\n            first logged message. It defaults to ``False``.\n        watch : |bool|, optional\n            Whether or not the file should be watched and re-opened when deleted or changed (based\n            on its device and inode properties) by an external program. It defaults to ``False``.\n        mode : |str|, optional\n            The opening mode as for built-in |open| function. It defaults to ``\"a\"`` (open the\n            file in appending mode).\n        buffering : |int|, optional\n            The buffering policy as for built-in |open| function. It defaults to ``1`` (line\n            buffered file).\n        encoding : |str|, optional\n            The file encoding as for built-in |open| function. It defaults to ``\"utf8\"``.\n        **kwargs\n            Others parameters are passed to the built-in |open| function.\n\n        Returns\n        -------\n        :class:`int`\n            An identifier associated with the added sink and which should be used to\n            |remove| it.\n\n        Raises\n        ------\n        ValueError\n            If any of the arguments passed to configure the sink is invalid.\n\n        Notes\n        -----\n        Extended summary follows.\n\n        .. _sink:\n\n        .. rubric:: The sink parameter\n\n        The ``sink`` handles incoming log messages and proceed to their writing somewhere and\n        somehow. A sink can take many forms:\n\n        - A |file-like object|_ like ``sys.stderr`` or ``open(\"somefile.log\", \"w\")``. Anything with\n          a ``.write()`` method is considered as a file-like object. Custom handlers may also\n          implement ``flush()`` (called after each logged message), ``stop()`` (called at sink\n          termination) and ``complete()`` (awaited by the eponymous method).\n        - A file path as |str| or |Path|. It can be parametrized with some additional parameters,\n          see below.\n        - A |callable|_ (such as a simple function) like ``lambda msg: print(msg)``. This\n          allows for logging procedure entirely defined by user preferences and needs.\n        - A asynchronous |coroutine function|_ defined with the ``async def`` statement. The\n          coroutine object returned by such function will be added to the event loop using\n          |loop.create_task|. The tasks should be awaited before ending the loop by using\n          |complete|.\n        - A built-in |Handler| like ``logging.StreamHandler``. In such a case, the `Loguru` records\n          are automatically converted to the structure expected by the |logging| module.\n\n        Note that the logging functions are not `reentrant`_. This means you should avoid using\n        the ``logger`` inside any of your sinks or from within |signal| handlers. Otherwise, you\n        may face deadlock if the module's sink was not explicitly disabled.\n\n        .. _message:\n\n        .. rubric:: The logged message\n\n        The logged message passed to all added sinks is nothing more than a string of the\n        formatted log, to which a special attribute is associated: the ``.record`` which is a dict\n        containing all contextual information possibly needed (see below).\n\n        Logged messages are formatted according to the ``format`` of the added sink. This format\n        is usually a string containing braces fields to display attributes from the record dict.\n\n        If fine-grained control is needed, the ``format`` can also be a function which takes the\n        record as parameter and return the format template string. However, note that in such a\n        case, you should take care of appending the line ending and exception field to the returned\n        format, while ``\"\\n{exception}\"`` is automatically appended for convenience if ``format`` is\n        a string.\n\n        The ``filter`` attribute can be used to control which messages are effectively passed to the\n        sink and which one are ignored. A function can be used, accepting the record as an\n        argument, and returning ``True`` if the message should be logged, ``False`` otherwise. If\n        a string is used, only the records with the same ``name`` and its children will be allowed.\n        One can also pass a ``dict`` mapping module names to minimum required level. In such case,\n        each log record will search for it's closest parent in the ``dict`` and use the associated\n        level as the filter. The ``dict`` values can be ``int`` severity, ``str`` level name or\n        ``True`` and ``False`` to respectively authorize and discard all module logs\n        unconditionally. In order to set a default level, the ``\"\"`` module name should be used as\n        it is the parent of all modules (it does not suppress global ``level`` threshold, though).\n\n        Note that while calling a logging method, the keyword arguments (if any) are automatically\n        added to the ``extra`` dict for convenient contextualization (in addition to being used for\n        formatting).\n\n        .. _levels:\n\n        .. rubric:: The severity levels\n\n        Each logged message is associated with a severity level. These levels make it possible to\n        prioritize messages and to choose the verbosity of the logs according to usages. For\n        example, it allows to display some debugging information to a developer, while hiding it to\n        the end user running the application.\n\n        The ``level`` attribute of every added sink controls the minimum threshold from which log\n        messages are allowed to be emitted. While using the ``logger``, you are in charge of\n        configuring the appropriate granularity of your logs. It is possible to add even more custom\n        levels by using the |level| method.\n\n        Here are the standard levels with their default severity value, each one is associated with\n        a logging method of the same name:\n\n        +----------------------+------------------------+------------------------+\n        | Level name           | Severity value         | Logger method          |\n        +======================+========================+========================+\n        | ``TRACE``            | 5                      | |logger.trace|         |\n        +----------------------+------------------------+------------------------+\n        | ``DEBUG``            | 10                     | |logger.debug|         |\n        +----------------------+------------------------+------------------------+\n        | ``INFO``             | 20                     | |logger.info|          |\n        +----------------------+------------------------+------------------------+\n        | ``SUCCESS``          | 25                     | |logger.success|       |\n        +----------------------+------------------------+------------------------+\n        | ``WARNING``          | 30                     | |logger.warning|       |\n        +----------------------+------------------------+------------------------+\n        | ``ERROR``            | 40                     | |logger.error|         |\n        +----------------------+------------------------+------------------------+\n        | ``CRITICAL``         | 50                     | |logger.critical|      |\n        +----------------------+------------------------+------------------------+\n\n        .. _record:\n\n        .. rubric:: The record dict\n\n        The record is just a Python dict, accessible from sinks by ``message.record``. It contains\n        all contextual information of the logging call (time, function, file, line, level, etc.).\n\n        Each of the record keys can be used in the handler's ``format`` so the corresponding value\n        is properly displayed in the logged message (e.g. ``\"{level}\"`` will return ``\"INFO\"``).\n        Some records' values are objects with two or more attributes. These can be formatted with\n        ``\"{key.attr}\"`` (``\"{key}\"`` would display one by default).\n\n        Note that you can use any `formatting directives`_ available in Python's ``str.format()``\n        method (e.g. ``\"{key: >3}\"`` will right-align and pad to a width of 3 characters). This is\n        particularly useful for time formatting (see below).\n\n        +------------+---------------------------------+----------------------------+\n        | Key        | Description                     | Attributes                 |\n        +============+=================================+============================+\n        | elapsed    | The time elapsed since the      | See |timedelta|            |\n        |            | start of the program            |                            |\n        +------------+---------------------------------+----------------------------+\n        | exception  | The formatted exception if any, | ``type``, ``value``,       |\n        |            | ``None`` otherwise              | ``traceback``              |\n        +------------+---------------------------------+----------------------------+\n        | extra      | The dict of attributes          | None                       |\n        |            | bound by the user (see |bind|)  |                            |\n        +------------+---------------------------------+----------------------------+\n        | file       | The file where the logging call | ``name`` (default),        |\n        |            | was made                        | ``path``                   |\n        +------------+---------------------------------+----------------------------+\n        | function   | The function from which the     | None                       |\n        |            | logging call was made           |                            |\n        +------------+---------------------------------+----------------------------+\n        | level      | The severity used to log the    | ``name`` (default),        |\n        |            | message                         | ``no``, ``icon``           |\n        +------------+---------------------------------+----------------------------+\n        | line       | The line number in the source   | None                       |\n        |            | code                            |                            |\n        +------------+---------------------------------+----------------------------+\n        | message    | The logged message (not yet     | None                       |\n        |            | formatted)                      |                            |\n        +------------+---------------------------------+----------------------------+\n        | module     | The module where the logging    | None                       |\n        |            | call was made                   |                            |\n        +------------+---------------------------------+----------------------------+\n        | name       | The ``__name__`` where the      | None                       |\n        |            | logging call was made           |                            |\n        +------------+---------------------------------+----------------------------+\n        | process    | The process in which the        | ``name``, ``id`` (default) |\n        |            | logging call was made           |                            |\n        +------------+---------------------------------+----------------------------+\n        | thread     | The thread in which the         | ``name``, ``id`` (default) |\n        |            | logging call was made           |                            |\n        +------------+---------------------------------+----------------------------+\n        | time       | The aware local time when the   | See |datetime|             |\n        |            | logging call was made           |                            |\n        +------------+---------------------------------+----------------------------+\n\n        .. _time:\n\n        .. rubric:: The time formatting\n\n        To use your favorite time representation, you can set it directly in the time formatter\n        specifier of your handler format, like for example ``format=\"{time:HH:mm:ss} {message}\"``.\n        Note that this datetime represents your local time, and it is also made timezone-aware,\n        so you can display the UTC offset to avoid ambiguities.\n\n        The time field can be formatted using more human-friendly tokens. These constitute a subset\n        of the one used by the `Pendulum`_ library of `@sdispater`_. To escape a token, just add\n        square brackets around it, for example ``\"[YY]\"`` would display literally ``\"YY\"``.\n\n        If you prefer to display UTC rather than local time, you can add ``\"!UTC\"`` at the very end\n        of the time format, like ``{time:HH:mm:ss!UTC}``. Doing so will convert the ``datetime``\n        to UTC before formatting.\n\n        If no time formatter specifier is used, like for example if ``format=\"{time} {message}\"``,\n        the default one will use ISO 8601.\n\n        +------------------------+---------+----------------------------------------+\n        |                        | Token   | Output                                 |\n        +========================+=========+========================================+\n        | Year                   | YYYY    | 2000, 2001, 2002 ... 2012, 2013        |\n        |                        +---------+----------------------------------------+\n        |                        | YY      | 00, 01, 02 ... 12, 13                  |\n        +------------------------+---------+----------------------------------------+\n        | Quarter                | Q       | 1 2 3 4                                |\n        +------------------------+---------+----------------------------------------+\n        | Month                  | MMMM    | January, February, March ...           |\n        |                        +---------+----------------------------------------+\n        |                        | MMM     | Jan, Feb, Mar ...                      |\n        |                        +---------+----------------------------------------+\n        |                        | MM      | 01, 02, 03 ... 11, 12                  |\n        |                        +---------+----------------------------------------+\n        |                        | M       | 1, 2, 3 ... 11, 12                     |\n        +------------------------+---------+----------------------------------------+\n        | Day of Year            | DDDD    | 001, 002, 003 ... 364, 365             |\n        |                        +---------+----------------------------------------+\n        |                        | DDD     | 1, 2, 3 ... 364, 365                   |\n        +------------------------+---------+----------------------------------------+\n        | Day of Month           | DD      | 01, 02, 03 ... 30, 31                  |\n        |                        +---------+----------------------------------------+\n        |                        | D       | 1, 2, 3 ... 30, 31                     |\n        +------------------------+---------+----------------------------------------+\n        | Day of Week            | dddd    | Monday, Tuesday, Wednesday ...         |\n        |                        +---------+----------------------------------------+\n        |                        | ddd     | Mon, Tue, Wed ...                      |\n        |                        +---------+----------------------------------------+\n        |                        | d       | 0, 1, 2 ... 6                          |\n        +------------------------+---------+----------------------------------------+\n        | Days of ISO Week       | E       | 1, 2, 3 ... 7                          |\n        +------------------------+---------+----------------------------------------+\n        | Hour                   | HH      | 00, 01, 02 ... 23, 24                  |\n        |                        +---------+----------------------------------------+\n        |                        | H       | 0, 1, 2 ... 23, 24                     |\n        |                        +---------+----------------------------------------+\n        |                        | hh      | 01, 02, 03 ... 11, 12                  |\n        |                        +---------+----------------------------------------+\n        |                        | h       | 1, 2, 3 ... 11, 12                     |\n        +------------------------+---------+----------------------------------------+\n        | Minute                 | mm      | 00, 01, 02 ... 58, 59                  |\n        |                        +---------+----------------------------------------+\n        |                        | m       | 0, 1, 2 ... 58, 59                     |\n        +------------------------+---------+----------------------------------------+\n        | Second                 | ss      | 00, 01, 02 ... 58, 59                  |\n        |                        +---------+----------------------------------------+\n        |                        | s       | 0, 1, 2 ... 58, 59                     |\n        +------------------------+---------+----------------------------------------+\n        | Fractional Second      | S       | 0 1 ... 8 9                            |\n        |                        +---------+----------------------------------------+\n        |                        | SS      | 00, 01, 02 ... 98, 99                  |\n        |                        +---------+----------------------------------------+\n        |                        | SSS     | 000 001 ... 998 999                    |\n        |                        +---------+----------------------------------------+\n        |                        | SSSS... | 000[0..] 001[0..] ... 998[0..] 999[0..]|\n        |                        +---------+----------------------------------------+\n        |                        | SSSSSS  | 000000 000001 ... 999998 999999        |\n        +------------------------+---------+----------------------------------------+\n        | AM / PM                | A       | AM, PM                                 |\n        +------------------------+---------+----------------------------------------+\n        | Timezone               | Z       | -07:00, -06:00 ... +06:00, +07:00      |\n        |                        +---------+----------------------------------------+\n        |                        | ZZ      | -0700, -0600 ... +0600, +0700          |\n        |                        +---------+----------------------------------------+\n        |                        | zz      | EST CST ... MST PST                    |\n        +------------------------+---------+----------------------------------------+\n        | Seconds timestamp      | X       | 1381685817, 1234567890.123             |\n        +------------------------+---------+----------------------------------------+\n        | Microseconds timestamp | x       | 1234567890123                          |\n        +------------------------+---------+----------------------------------------+\n\n        .. _file:\n\n        .. rubric:: The file sinks\n\n        If the sink is a |str| or a |Path|, the corresponding file will be opened for writing logs.\n        The path can also contain a special ``\"{time}\"`` field that will be formatted with the\n        current date at file creation.\n\n        The ``rotation`` check is made before logging each message. If there is already an existing\n        file with the same name that the file to be created, then the existing file is renamed by\n        appending the date to its basename to prevent file overwriting. This parameter accepts:\n\n        - an |int| which corresponds to the maximum file size in bytes before that the current\n          logged file is closed and a new one started over.\n        - a |timedelta| which indicates the frequency of each new rotation.\n        - a |time| which specifies the hour when the daily rotation should occur.\n        - a |str| for human-friendly parametrization of one of the previously enumerated types.\n          Examples: ``\"100 MB\"``, ``\"0.5 GB\"``, ``\"1 month 2 weeks\"``, ``\"4 days\"``, ``\"10h\"``,\n          ``\"monthly\"``, ``\"18:00\"``, ``\"sunday\"``, ``\"w0\"``, ``\"monday at 12:00\"``, ...\n        - a |callable|_ which will be invoked before logging. It should accept two arguments: the\n          logged message and the file object, and it should return ``True`` if the rotation should\n          happen now, ``False`` otherwise.\n\n        The ``retention`` occurs at rotation or at sink stop if rotation is ``None``. Files are\n        selected if they match the pattern ``\"basename(.*).ext(.*)\"`` (possible time fields are\n        beforehand replaced with ``.*``) based on the sink file. This parameter accepts:\n\n        - an |int| which indicates the number of log files to keep, while older files are removed.\n        - a |timedelta| which specifies the maximum age of files to keep.\n        - a |str| for human-friendly parametrization of the maximum age of files to keep.\n          Examples: ``\"1 week, 3 days\"``, ``\"2 months\"``, ...\n        - a |callable|_ which will be invoked before the retention process. It should accept the\n          list of log files as argument and process to whatever it wants (moving files, removing\n          them, etc.).\n\n        The ``compression`` happens at rotation or at sink stop if rotation is ``None``. This\n        parameter accepts:\n\n        - a |str| which corresponds to the compressed or archived file extension. This can be one\n          of: ``\"gz\"``, ``\"bz2\"``, ``\"xz\"``, ``\"lzma\"``, ``\"tar\"``, ``\"tar.gz\"``, ``\"tar.bz2\"``,\n          ``\"tar.xz\"``, ``\"zip\"``.\n        - a |callable|_ which will be invoked before file termination. It should accept the path of\n          the log file as argument and process to whatever it wants (custom compression, network\n          sending, removing it, etc.).\n\n        Either way, if you use a custom function designed according to your preferences, you must be\n        very careful not to use the ``logger`` within your function. Otherwise, there is a risk that\n        your program hang because of a deadlock.\n\n        .. _color:\n\n        .. rubric:: The color markups\n\n        To add colors to your logs, you just have to enclose your format string with the appropriate\n        tags (e.g. ``<red>some message</red>``). These tags are automatically removed if the sink\n        doesn't support ansi codes. For convenience, you can use ``</>`` to close the last opening\n        tag without repeating its name (e.g. ``<red>another message</>``).\n\n        The special tag ``<level>`` (abbreviated with ``<lvl>``) is transformed according to\n        the configured color of the logged message level.\n\n        Tags which are not recognized will raise an exception during parsing, to inform you about\n        possible misuse. If you wish to display a markup tag literally, you can escape it by\n        prepending a ``\\`` like for example ``\\<blue>``. If, for some reason, you need to escape a\n        string programmatically, note that the regex used internally to parse markup tags is\n        ``r\"\\\\?</?((?:[fb]g\\s)?[^<>\\s]*)>\"``.\n\n        Note that when logging a message with ``opt(colors=True)``, color tags present in the\n        formatting arguments (``args`` and ``kwargs``) are completely ignored. This is important if\n        you need to log strings containing markups that might interfere with the color tags (in this\n        case, do not use f-string).\n\n        Here are the available tags (note that compatibility may vary depending on terminal):\n\n        +------------------------------------+--------------------------------------+\n        | Color (abbr)                       | Styles (abbr)                        |\n        +====================================+======================================+\n        | Black (k)                          | Bold (b)                             |\n        +------------------------------------+--------------------------------------+\n        | Blue (e)                           | Dim (d)                              |\n        +------------------------------------+--------------------------------------+\n        | Cyan (c)                           | Normal (n)                           |\n        +------------------------------------+--------------------------------------+\n        | Green (g)                          | Italic (i)                           |\n        +------------------------------------+--------------------------------------+\n        | Magenta (m)                        | Underline (u)                        |\n        +------------------------------------+--------------------------------------+\n        | Red (r)                            | Strike (s)                           |\n        +------------------------------------+--------------------------------------+\n        | White (w)                          | Reverse (v)                          |\n        +------------------------------------+--------------------------------------+\n        | Yellow (y)                         | Blink (l)                            |\n        +------------------------------------+--------------------------------------+\n        |                                    | Hide (h)                             |\n        +------------------------------------+--------------------------------------+\n\n        Usage:\n\n        +-----------------+-------------------------------------------------------------------+\n        | Description     | Examples                                                          |\n        |                 +---------------------------------+---------------------------------+\n        |                 | Foreground                      | Background                      |\n        +=================+=================================+=================================+\n        | Basic colors    | ``<red>``, ``<r>``              | ``<GREEN>``, ``<G>``            |\n        +-----------------+---------------------------------+---------------------------------+\n        | Light colors    | ``<light-blue>``, ``<le>``      | ``<LIGHT-CYAN>``, ``<LC>``      |\n        +-----------------+---------------------------------+---------------------------------+\n        | 8-bit colors    | ``<fg 86>``, ``<fg 255>``       | ``<bg 42>``, ``<bg 9>``         |\n        +-----------------+---------------------------------+---------------------------------+\n        | Hex colors      | ``<fg #00005f>``, ``<fg #EE1>`` | ``<bg #AF5FD7>``, ``<bg #fff>`` |\n        +-----------------+---------------------------------+---------------------------------+\n        | RGB colors      | ``<fg 0,95,0>``                 | ``<bg 72,119,65>``              |\n        +-----------------+---------------------------------+---------------------------------+\n        | Stylizing       | ``<bold>``, ``<b>``,  ``<underline>``, ``<u>``                    |\n        +-----------------+-------------------------------------------------------------------+\n\n        .. _env:\n\n        .. rubric:: The environment variables\n\n        The default values of sink parameters can be entirely customized. This is particularly\n        useful if you don't like the log format of the pre-configured sink.\n\n        Each of the |add| default parameter can be modified by setting the ``LOGURU_[PARAM]``\n        environment variable. For example on Linux: ``export LOGURU_FORMAT=\"{time} - {message}\"``\n        or ``export LOGURU_DIAGNOSE=NO``.\n\n        The default levels' attributes can also be modified by setting the ``LOGURU_[LEVEL]_[ATTR]``\n        environment variable. For example, on Windows: ``setx LOGURU_DEBUG_COLOR \"<blue>\"``\n        or ``setx LOGURU_TRACE_ICON \"\ud83d\ude80\"``. If you use the ``set`` command, do not include quotes\n        but escape special symbol as needed, e.g. ``set LOGURU_DEBUG_COLOR=^<blue^>``.\n\n        If you want to disable the pre-configured sink, you can set the ``LOGURU_AUTOINIT``\n        variable to ``False``.\n\n        On Linux, you will probably need to edit the ``~/.profile`` file to make this persistent. On\n        Windows, don't forget to restart your terminal for the change to be taken into account.\n\n        Examples\n        --------\n        >>> logger.add(sys.stdout, format=\"{time} - {level} - {message}\", filter=\"sub.module\")\n\n        >>> logger.add(\"file_{time}.log\", level=\"TRACE\", rotation=\"100 MB\")\n\n        >>> def debug_only(record):\n        ...     return record[\"level\"].name == \"DEBUG\"\n        ...\n        >>> logger.add(\"debug.log\", filter=debug_only)  # Other levels are filtered out\n\n        >>> def my_sink(message):\n        ...     record = message.record\n        ...     update_db(message, time=record[\"time\"], level=record[\"level\"])\n        ...\n        >>> logger.add(my_sink)\n\n        >>> level_per_module = {\n        ...     \"\": \"DEBUG\",\n        ...     \"third.lib\": \"WARNING\",\n        ...     \"anotherlib\": False\n        ... }\n        >>> logger.add(lambda m: print(m, end=\"\"), filter=level_per_module, level=0)\n\n        >>> async def publish(message):\n        ...     await api.post(message)\n        ...\n        >>> logger.add(publish, serialize=True)\n\n        >>> from logging import StreamHandler\n        >>> logger.add(StreamHandler(sys.stderr), format=\"{message}\")\n\n        >>> class RandomStream:\n        ...     def __init__(self, seed, threshold):\n        ...         self.threshold = threshold\n        ...         random.seed(seed)\n        ...     def write(self, message):\n        ...         if random.random() > self.threshold:\n        ...             print(message)\n        ...\n        >>> stream_object = RandomStream(seed=12345, threshold=0.25)\n        >>> logger.add(stream_object, level=\"INFO\")\n        \"\"\"\n        with self._core.lock:\n            handler_id = next(self._core.handlers_count)\n\n        error_interceptor = ErrorInterceptor(catch, handler_id)\n\n        if colorize is None and serialize:\n            colorize = False\n\n        if isinstance(sink, (str, PathLike)):\n            path = sink\n            name = \"'%s'\" % path\n\n            if colorize is None:\n                colorize = False\n\n            wrapped_sink = FileSink(path, **kwargs)\n            kwargs = {}\n            encoding = wrapped_sink.encoding\n            terminator = \"\\n\"\n            exception_prefix = \"\"\n        elif hasattr(sink, \"write\") and callable(sink.write):\n            name = getattr(sink, \"name\", None) or repr(sink)\n\n            if colorize is None:\n                colorize = _colorama.should_colorize(sink)\n\n            if colorize is True and _colorama.should_wrap(sink):\n                stream = _colorama.wrap(sink)\n            else:\n                stream = sink\n\n            wrapped_sink = StreamSink(stream)\n            encoding = getattr(sink, \"encoding\", None)\n            terminator = \"\\n\"\n            exception_prefix = \"\"\n        elif isinstance(sink, logging.Handler):\n            name = repr(sink)\n\n            if colorize is None:\n                colorize = False\n\n            wrapped_sink = StandardSink(sink)\n            encoding = getattr(sink, \"encoding\", None)\n            terminator = \"\"\n            exception_prefix = \"\\n\"\n        elif iscoroutinefunction(sink) or iscoroutinefunction(\n            getattr(sink, \"__call__\", None)  # noqa: B004\n        ):\n            name = getattr(sink, \"__name__\", None) or repr(sink)\n\n            if colorize is None:\n                colorize = False\n\n            loop = kwargs.pop(\"loop\", None)\n\n            # The worker thread needs an event loop, it can't create a new one internally because it\n            # has to be accessible by the user while calling \"complete()\", instead we use the global\n            # one when the sink is added. If \"enqueue=False\" the event loop is dynamically retrieved\n            # at each logging call, which is much more convenient. However, coroutine can't access\n            # running loop in Python 3.5.2 and earlier versions, see python/asyncio#452.\n            if enqueue and loop is None:\n                try:\n                    loop = _asyncio_loop.get_running_loop()\n                except RuntimeError as e:\n                    raise ValueError(\n                        \"An event loop is required to add a coroutine sink with `enqueue=True`, \"\n                        \"but none has been passed as argument and none is currently running.\"\n                    ) from e\n\n            coro = sink if iscoroutinefunction(sink) else sink.__call__\n            wrapped_sink = AsyncSink(coro, loop, error_interceptor)\n            encoding = \"utf8\"\n            terminator = \"\\n\"\n            exception_prefix = \"\"\n        elif callable(sink):\n            name = getattr(sink, \"__name__\", None) or repr(sink)\n\n            if colorize is None:\n                colorize = False\n\n            wrapped_sink = CallableSink(sink)\n            encoding = \"utf8\"\n            terminator = \"\\n\"\n            exception_prefix = \"\"\n        else:\n            raise TypeError(\"Cannot log to objects of type '%s'\" % type(sink).__name__)\n\n        if kwargs:\n            raise TypeError(\"add() got an unexpected keyword argument '%s'\" % next(iter(kwargs)))\n\n        if filter is None:\n            filter_func = None\n        elif filter == \"\":\n            filter_func = _filters.filter_none\n        elif isinstance(filter, str):\n            parent = filter + \".\"\n            length = len(parent)\n            filter_func = functools.partial(_filters.filter_by_name, parent=parent, length=length)\n        elif isinstance(filter, dict):\n            level_per_module = {}\n            for module, level_ in filter.items():\n                if module is not None and not isinstance(module, str):\n                    raise TypeError(\n                        \"The filter dict contains an invalid module, \"\n                        \"it should be a string (or None), not: '%s'\" % type(module).__name__\n                    )\n                if level_ is False:\n                    levelno_ = False\n                elif level_ is True:\n                    levelno_ = 0\n                elif isinstance(level_, str):\n                    try:\n                        levelno_ = self.level(level_).no\n                    except ValueError:\n                        raise ValueError(\n                            \"The filter dict contains a module '%s' associated to a level name \"\n                            \"which does not exist: '%s'\" % (module, level_)\n                        )\n                elif isinstance(level_, int):\n                    levelno_ = level_\n                else:\n                    raise TypeError(\n                        \"The filter dict contains a module '%s' associated to an invalid level, \"\n                        \"it should be an integer, a string or a boolean, not: '%s'\"\n                        % (module, type(level_).__name__)\n                    )\n                if levelno_ < 0:\n                    raise ValueError(\n                        \"The filter dict contains a module '%s' associated to an invalid level, \"\n                        \"it should be a positive integer, not: '%d'\" % (module, levelno_)\n                    )\n                level_per_module[module] = levelno_\n            filter_func = functools.partial(\n                _filters.filter_by_level, level_per_module=level_per_module\n            )\n        elif callable(filter):\n            if filter == builtins.filter:\n                raise ValueError(\n                    \"The built-in 'filter()' function cannot be used as a 'filter' parameter, \"\n                    \"this is most likely a mistake (please double-check the arguments passed \"\n                    \"to 'logger.add()').\"\n                )\n            filter_func = filter\n        else:\n            raise TypeError(\n                \"Invalid filter, it should be a function, a string or a dict, not: '%s'\"\n                % type(filter).__name__\n            )\n\n        if isinstance(level, str):\n            levelno = self.level(level).no\n        elif isinstance(level, int):\n            levelno = level\n        else:\n            raise TypeError(\n                \"Invalid level, it should be an integer or a string, not: '%s'\"\n                % type(level).__name__\n            )\n\n        if levelno < 0:\n            raise ValueError(\n                \"Invalid level value, it should be a positive integer, not: %d\" % levelno\n            )\n\n        if isinstance(format, str):\n            try:\n                formatter = Colorizer.prepare_format(format + terminator + \"{exception}\")\n            except ValueError as e:\n                raise ValueError(\n                    \"Invalid format, color markups could not be parsed correctly\"\n                ) from e\n            is_formatter_dynamic = False\n        elif callable(format):\n            if format == builtins.format:\n                raise ValueError(\n                    \"The built-in 'format()' function cannot be used as a 'format' parameter, \"\n                    \"this is most likely a mistake (please double-check the arguments passed \"\n                    \"to 'logger.add()').\"\n                )\n            formatter = format\n            is_formatter_dynamic = True\n        else:\n            raise TypeError(\n                \"Invalid format, it should be a string or a function, not: '%s'\"\n                % type(format).__name__\n            )\n\n        if not isinstance(encoding, str):\n            encoding = \"ascii\"\n\n        with self._core.lock:\n            exception_formatter = ExceptionFormatter(\n                colorize=colorize,\n                encoding=encoding,\n                diagnose=diagnose,\n                backtrace=backtrace,\n                hidden_frames_filename=self.catch.__code__.co_filename,\n                prefix=exception_prefix,\n            )\n\n            handler = Handler(\n                name=name,\n                sink=wrapped_sink,\n                levelno=levelno,\n                formatter=formatter,\n                is_formatter_dynamic=is_formatter_dynamic,\n                filter_=filter_func,\n                colorize=colorize,\n                serialize=serialize,\n                enqueue=enqueue,\n                id_=handler_id,\n                error_interceptor=error_interceptor,\n                exception_formatter=exception_formatter,\n                levels_ansi_codes=self._core.levels_ansi_codes,\n            )\n\n            handlers = self._core.handlers.copy()\n            handlers[handler_id] = handler\n\n            self._core.min_level = min(self._core.min_level, levelno)\n            self._core.handlers = handlers\n\n        return handler_id\n\n    def remove(self, handler_id=None):\n        \"\"\"Remove a previously added handler and stop sending logs to its sink.\n\n        Parameters\n        ----------\n        handler_id : |int| or ``None``\n            The id of the sink to remove, as it was returned by the |add| method. If ``None``, all\n            handlers are removed. The pre-configured handler is guaranteed to have the index ``0``.\n\n        Raises\n        ------\n        ValueError\n            If ``handler_id`` is not ``None`` but there is no active handler with such id.\n\n        Examples\n        --------\n        >>> i = logger.add(sys.stderr, format=\"{message}\")\n        >>> logger.info(\"Logging\")\n        Logging\n        >>> logger.remove(i)\n        >>> logger.info(\"No longer logging\")\n        \"\"\"\n        if not (handler_id is None or isinstance(handler_id, int)):\n            raise TypeError(\n                \"Invalid handler id, it should be an integer as returned \"\n                \"by the 'add()' method (or None), not: '%s'\" % type(handler_id).__name__\n            )\n\n        with self._core.lock:\n            handlers = self._core.handlers.copy()\n\n            if handler_id is not None and handler_id not in handlers:\n                raise ValueError(\"There is no existing handler with id %d\" % handler_id) from None\n\n            if handler_id is None:\n                handler_ids = list(handlers.keys())\n            else:\n                handler_ids = [handler_id]\n\n            for handler_id in handler_ids:\n                handler = handlers.pop(handler_id)\n\n                # This needs to be done first in case \"stop()\" raises an exception\n                levelnos = (h.levelno for h in handlers.values())\n                self._core.min_level = min(levelnos, default=float(\"inf\"))\n                self._core.handlers = handlers\n\n                handler.stop()\n\n    def complete(self):\n        \"\"\"Wait for the end of enqueued messages and asynchronous tasks scheduled by handlers.\n\n        This method proceeds in two steps: first it waits for all logging messages added to handlers\n        with ``enqueue=True`` to be processed, then it returns an object that can be awaited to\n        finalize all logging tasks added to the event loop by coroutine sinks.\n\n        It can be called from non-asynchronous code. This is especially recommended when the\n        ``logger`` is utilized with ``multiprocessing`` to ensure messages put to the internal\n        queue have been properly transmitted before leaving a child process.\n\n        The returned object should be awaited before the end of a coroutine executed by\n        |asyncio.run| or |loop.run_until_complete| to ensure all asynchronous logging messages are\n        processed. The function |asyncio.get_running_loop| is called beforehand, only tasks\n        scheduled in the same loop that the current one will be awaited by the method.\n\n        Returns\n        -------\n        :term:`awaitable`\n            An awaitable object which ensures all asynchronous logging calls are completed when\n            awaited.\n\n        Examples\n        --------\n        >>> async def sink(message):\n        ...     await asyncio.sleep(0.1)  # IO processing...\n        ...     print(message, end=\"\")\n        ...\n        >>> async def work():\n        ...     logger.info(\"Start\")\n        ...     logger.info(\"End\")\n        ...     await logger.complete()\n        ...\n        >>> logger.add(sink)\n        1\n        >>> asyncio.run(work())\n        Start\n        End\n\n        >>> def process():\n        ...     logger.info(\"Message sent from the child\")\n        ...     logger.complete()\n        ...\n        >>> logger.add(sys.stderr, enqueue=True)\n        1\n        >>> process = multiprocessing.Process(target=process)\n        >>> process.start()\n        >>> process.join()\n        Message sent from the child\n        \"\"\"\n\n        with self._core.lock:\n            handlers = self._core.handlers.copy()\n            for handler in handlers.values():\n                handler.complete_queue()\n\n        logger = self\n\n        class AwaitableCompleter:\n            def __await__(self):\n                with logger._core.lock:\n                    handlers = logger._core.handlers.copy()\n                    for handler in handlers.values():\n                        yield from handler.complete_async().__await__()\n\n        return AwaitableCompleter()\n\n    def catch(\n        self,\n        exception=Exception,\n        *,\n        level=\"ERROR\",\n        reraise=False,\n        onerror=None,\n        exclude=None,\n        default=None,\n        message=\"An error has been caught in function '{record[function]}', \"\n        \"process '{record[process].name}' ({record[process].id}), \"\n        \"thread '{record[thread].name}' ({record[thread].id}):\"\n    ):\n        \"\"\"Return a decorator to automatically log possibly caught error in wrapped function.\n\n        This is useful to ensure unexpected exceptions are logged, the entire program can be\n        wrapped by this method. This is also very useful to decorate |Thread.run| methods while\n        using threads to propagate errors to the main logger thread.\n\n        Note that the visibility of variables values (which uses the great |better_exceptions|_\n        library from `@Qix-`_) depends on the ``diagnose`` option of each configured sink.\n\n        The returned object can also be used as a context manager.\n\n        Parameters\n        ----------\n        exception : |Exception|, optional\n            The type of exception to intercept. If several types should be caught, a tuple of\n            exceptions can be used too.\n        level : |str| or |int|, optional\n            The level name or severity with which the message should be logged.\n        reraise : |bool|, optional\n            Whether the exception should be raised again and hence propagated to the caller.\n        onerror : |callable|_, optional\n            A function that will be called if an error occurs, once the message has been logged.\n            It should accept the exception instance as it sole argument.\n        exclude : |Exception|, optional\n            A type of exception (or a tuple of types) that will be purposely ignored and hence\n            propagated to the caller without being logged.\n        default : |Any|, optional\n            The value to be returned by the decorated function if an error occurred without being\n            re-raised.\n        message : |str|, optional\n            The message that will be automatically logged if an exception occurs. Note that it will\n            be formatted with the ``record`` attribute.\n\n        Returns\n        -------\n        :term:`decorator` / :term:`context manager`\n            An object that can be used to decorate a function or as a context manager to log\n            exceptions possibly caught.\n\n        Examples\n        --------\n        >>> @logger.catch\n        ... def f(x):\n        ...     100 / x\n        ...\n        >>> def g():\n        ...     f(10)\n        ...     f(0)\n        ...\n        >>> g()\n        ERROR - An error has been caught in function 'g', process 'Main' (367), thread 'ch1' (1398):\n        Traceback (most recent call last):\n          File \"program.py\", line 12, in <module>\n            g()\n            \u2514 <function g at 0x7f225fe2bc80>\n        > File \"program.py\", line 10, in g\n            f(0)\n            \u2514 <function f at 0x7f225fe2b9d8>\n          File \"program.py\", line 6, in f\n            100 / x\n                  \u2514 0\n        ZeroDivisionError: division by zero\n\n        >>> with logger.catch(message=\"Because we never know...\"):\n        ...    main()  # No exception, no logs\n\n        >>> # Use 'onerror' to prevent the program exit code to be 0 (if 'reraise=False') while\n        >>> # also avoiding the stacktrace to be duplicated on stderr (if 'reraise=True').\n        >>> @logger.catch(onerror=lambda _: sys.exit(1))\n        ... def main():\n        ...     1 / 0\n        \"\"\"\n        if callable(exception) and (\n            not isclass(exception) or not issubclass(exception, BaseException)\n        ):\n            return self.catch()(exception)\n\n        logger = self\n\n        class Catcher:\n            def __init__(self, from_decorator):\n                self._from_decorator = from_decorator\n\n            def __enter__(self):\n                return None\n\n            def __exit__(self, type_, value, traceback_):\n                if type_ is None:\n                    return\n\n                if not issubclass(type_, exception):\n                    return False\n\n                if exclude is not None and issubclass(type_, exclude):\n                    return False\n\n                from_decorator = self._from_decorator\n                _, depth, _, *options = logger._options\n\n                if from_decorator:\n                    depth += 1\n\n                catch_options = [(type_, value, traceback_), depth, True] + options\n                level_id, static_level_no = logger._dynamic_level(level)\n                logger._log(\n                    level_id, static_level_no, from_decorator, catch_options, message, (), {}\n                )\n\n                if onerror is not None:\n                    onerror(value)\n\n                return not reraise\n\n            def __call__(self, function):\n                if isclass(function):\n                    raise TypeError(\n                        \"Invalid object decorated with 'catch()', it must be a function, \"\n                        \"not a class (tried to wrap '%s')\" % function.__name__\n                    )\n\n                catcher = Catcher(True)\n\n                if iscoroutinefunction(function):\n\n                    async def catch_wrapper(*args, **kwargs):\n                        with catcher:\n                            return await function(*args, **kwargs)\n                        return default\n\n                elif isgeneratorfunction(function):\n\n                    def catch_wrapper(*args, **kwargs):\n                        with catcher:\n                            return (yield from function(*args, **kwargs))\n                        return default\n\n                else:\n\n                    def catch_wrapper(*args, **kwargs):\n                        with catcher:\n                            return function(*args, **kwargs)\n                        return default\n\n                functools.update_wrapper(catch_wrapper, function)\n                return catch_wrapper\n\n        return Catcher(False)\n\n    def opt(\n        self,\n        *,\n        exception=None,\n        record=False,\n        lazy=False,\n        colors=False,\n        raw=False,\n        capture=True,\n        depth=0,\n        ansi=False\n    ):\n        r\"\"\"Parametrize a logging call to slightly change generated log message.\n\n        Note that it's not possible to chain |opt| calls, the last one takes precedence over the\n        others as it will \"reset\" the options to their default values.\n\n        Parameters\n        ----------\n        exception : |bool|, |tuple| or |Exception|, optional\n            If it does not evaluate as ``False``, the passed exception is formatted and added to the\n            log message. It could be an |Exception| object or a ``(type, value, traceback)`` tuple,\n            otherwise the exception information is retrieved from |sys.exc_info|.\n        record : |bool|, optional\n            If ``True``, the record dict contextualizing the logging call can be used to format the\n            message by using ``{record[key]}`` in the log message.\n        lazy : |bool|, optional\n            If ``True``, the logging call attribute to format the message should be functions which\n            will be called only if the level is high enough. This can be used to avoid expensive\n            functions if not necessary.\n        colors : |bool|, optional\n            If ``True``, logged message will be colorized according to the markups it possibly\n            contains.\n        raw : |bool|, optional\n            If ``True``, the formatting of each sink will be bypassed and the message will be sent\n            as is.\n        capture : |bool|, optional\n            If ``False``, the ``**kwargs`` of logged message will not automatically populate\n            the ``extra`` dict (although they are still used for formatting).\n        depth : |int|, optional\n            Specify which stacktrace should be used to contextualize the logged message. This is\n            useful while using the logger from inside a wrapped function to retrieve worthwhile\n            information.\n        ansi : |bool|, optional\n            Deprecated since version 0.4.1: the ``ansi`` parameter will be removed in Loguru 1.0.0,\n            it is replaced by ``colors`` which is a more appropriate name.\n\n        Returns\n        -------\n        :class:`~Logger`\n            A logger wrapping the core logger, but transforming logged message adequately before\n            sending.\n\n        Examples\n        --------\n        >>> try:\n        ...     1 / 0\n        ... except ZeroDivisionError:\n        ...    logger.opt(exception=True).debug(\"Exception logged with debug level:\")\n        ...\n        [18:10:02] DEBUG in '<module>' - Exception logged with debug level:\n        Traceback (most recent call last, catch point marked):\n        > File \"<stdin>\", line 2, in <module>\n        ZeroDivisionError: division by zero\n\n        >>> logger.opt(record=True).info(\"Current line is: {record[line]}\")\n        [18:10:33] INFO in '<module>' - Current line is: 1\n\n        >>> logger.opt(lazy=True).debug(\"If sink <= DEBUG: {x}\", x=lambda: math.factorial(2**5))\n        [18:11:19] DEBUG in '<module>' - If sink <= DEBUG: 263130836933693530167218012160000000\n\n        >>> logger.opt(colors=True).warning(\"We got a <red>BIG</red> problem\")\n        [18:11:30] WARNING in '<module>' - We got a BIG problem\n\n        >>> logger.opt(raw=True).debug(\"No formatting\\n\")\n        No formatting\n\n        >>> logger.opt(capture=False).info(\"Displayed but not captured: {value}\", value=123)\n        [18:11:41] Displayed but not captured: 123\n\n        >>> def wrapped():\n        ...     logger.opt(depth=1).info(\"Get parent context\")\n        ...\n        >>> def func():\n        ...     wrapped()\n        ...\n        >>> func()\n        [18:11:54] DEBUG in 'func' - Get parent context\n        \"\"\"\n        if ansi:\n            colors = True\n            warnings.warn(\n                \"The 'ansi' parameter is deprecated, please use 'colors' instead\",\n                DeprecationWarning,\n            )\n\n        args = self._options[-2:]\n        return Logger(self._core, exception, depth, record, lazy, colors, raw, capture, *args)\n\n    def bind(__self, **kwargs):  # noqa: N805\n        \"\"\"Bind attributes to the ``extra`` dict of each logged message record.\n\n        This is used to add custom context to each logging call.\n\n        Parameters\n        ----------\n        **kwargs\n            Mapping between keys and values that will be added to the ``extra`` dict.\n\n        Returns\n        -------\n        :class:`~Logger`\n            A logger wrapping the core logger, but which sends record with the customized ``extra``\n            dict.\n\n        Examples\n        --------\n        >>> logger.add(sys.stderr, format=\"{extra[ip]} - {message}\")\n        >>> class Server:\n        ...     def __init__(self, ip):\n        ...         self.ip = ip\n        ...         self.logger = logger.bind(ip=ip)\n        ...     def call(self, message):\n        ...         self.logger.info(message)\n        ...\n        >>> instance_1 = Server(\"192.168.0.200\")\n        >>> instance_2 = Server(\"127.0.0.1\")\n        >>> instance_1.call(\"First instance\")\n        192.168.0.200 - First instance\n        >>> instance_2.call(\"Second instance\")\n        127.0.0.1 - Second instance\n        \"\"\"\n        *options, extra = __self._options\n        return Logger(__self._core, *options, {**extra, **kwargs})\n\n    @contextlib.contextmanager\n    def contextualize(__self, **kwargs):  # noqa: N805\n        \"\"\"Bind attributes to the context-local ``extra`` dict while inside the ``with`` block.\n\n        Contrary to |bind| there is no ``logger`` returned, the ``extra`` dict is modified in-place\n        and updated globally. Most importantly, it uses |contextvars| which means that\n        contextualized values are unique to each threads and asynchronous tasks.\n\n        The ``extra`` dict will retrieve its initial state once the context manager is exited.\n\n        Parameters\n        ----------\n        **kwargs\n            Mapping between keys and values that will be added to the context-local ``extra`` dict.\n\n        Returns\n        -------\n        :term:`context manager` / :term:`decorator`\n            A context manager (usable as a decorator too) that will bind the attributes once entered\n            and restore the initial state of the ``extra`` dict while exited.\n\n        Examples\n        --------\n        >>> logger.add(sys.stderr, format=\"{message} | {extra}\")\n        1\n        >>> def task():\n        ...     logger.info(\"Processing!\")\n        ...\n        >>> with logger.contextualize(task_id=123):\n        ...     task()\n        ...\n        Processing! | {'task_id': 123}\n        >>> logger.info(\"Done.\")\n        Done. | {}\n        \"\"\"\n        with __self._core.lock:\n            new_context = {**context.get(), **kwargs}\n            token = context.set(new_context)\n\n        try:\n            yield\n        finally:\n            with __self._core.lock:\n                context.reset(token)\n\n    def patch(self, patcher):\n        \"\"\"Attach a function to modify the record dict created by each logging call.\n\n        The ``patcher`` may be used to update the record on-the-fly before it's propagated to the\n        handlers. This allows the \"extra\" dict to be populated with dynamic values and also permits\n        advanced modifications of the record emitted while logging a message. The function is called\n        once before sending the log message to the different handlers.\n\n        It is recommended to apply modification on the ``record[\"extra\"]`` dict rather than on the\n        ``record`` dict itself, as some values are used internally by `Loguru`, and modify them may\n        produce unexpected results.\n\n        The logger can be patched multiple times. In this case, the functions are called in the\n        same order as they are added.\n\n        Parameters\n        ----------\n        patcher: |callable|_\n            The function to which the record dict will be passed as the sole argument. This function\n            is in charge of updating the record in-place, the function does not need to return any\n            value, the modified record object will be re-used.\n\n        Returns\n        -------\n        :class:`~Logger`\n            A logger wrapping the core logger, but which records are passed through the ``patcher``\n            function before being sent to the added handlers.\n\n        Examples\n        --------\n        >>> logger.add(sys.stderr, format=\"{extra[utc]} {message}\")\n        >>> logger = logger.patch(lambda record: record[\"extra\"].update(utc=datetime.utcnow())\n        >>> logger.info(\"That's way, you can log messages with time displayed in UTC\")\n\n        >>> def wrapper(func):\n        ...     @functools.wraps(func)\n        ...     def wrapped(*args, **kwargs):\n        ...         logger.patch(lambda r: r.update(function=func.__name__)).info(\"Wrapped!\")\n        ...         return func(*args, **kwargs)\n        ...     return wrapped\n\n        >>> def recv_record_from_network(pipe):\n        ...     record = pickle.loads(pipe.read())\n        ...     level, message = record[\"level\"], record[\"message\"]\n        ...     logger.patch(lambda r: r.update(record)).log(level, message)\n        \"\"\"\n        *options, patchers, extra = self._options\n        return Logger(self._core, *options, patchers + [patcher], extra)\n\n    def level(self, name, no=None, color=None, icon=None):\n        \"\"\"Add, update or retrieve a logging level.\n\n        Logging levels are defined by their ``name`` to which a severity ``no``, an ansi ``color``\n        tag and an ``icon`` are associated and possibly modified at run-time. To |log| to a custom\n        level, you should necessarily use its name, the severity number is not linked back to levels\n        name (this implies that several levels can share the same severity).\n\n        To add a new level, its ``name`` and its ``no`` are required. A ``color`` and an ``icon``\n        can also be specified or will be empty by default.\n\n        To update an existing level, pass its ``name`` with the parameters to be changed. It is not\n        possible to modify the ``no`` of a level once it has been added.\n\n        To retrieve level information, the ``name`` solely suffices.\n\n        Parameters\n        ----------\n        name : |str|\n            The name of the logging level.\n        no : |int|\n            The severity of the level to be added or updated.\n        color : |str|\n            The color markup of the level to be added or updated.\n        icon : |str|\n            The icon of the level to be added or updated.\n\n        Returns\n        -------\n        ``Level``\n            A |namedtuple| containing information about the level.\n\n        Raises\n        ------\n        ValueError\n            If there is no level registered with such ``name``.\n\n        Examples\n        --------\n        >>> level = logger.level(\"ERROR\")\n        >>> print(level)\n        Level(name='ERROR', no=40, color='<red><bold>', icon='\u274c')\n        >>> logger.add(sys.stderr, format=\"{level.no} {level.icon} {message}\")\n        1\n        >>> logger.level(\"CUSTOM\", no=15, color=\"<blue>\", icon=\"@\")\n        Level(name='CUSTOM', no=15, color='<blue>', icon='@')\n        >>> logger.log(\"CUSTOM\", \"Logging...\")\n        15 @ Logging...\n        >>> logger.level(\"WARNING\", icon=r\"/!\\\\\")\n        Level(name='WARNING', no=30, color='<yellow><bold>', icon='/!\\\\\\\\')\n        >>> logger.warning(\"Updated!\")\n        30 /!\\\\ Updated!\n        \"\"\"\n        if not isinstance(name, str):\n            raise TypeError(\n                \"Invalid level name, it should be a string, not: '%s'\" % type(name).__name__\n            )\n\n        if no is color is icon is None:\n            try:\n                return self._core.levels[name]\n            except KeyError:\n                raise ValueError(\"Level '%s' does not exist\" % name) from None\n\n        if name not in self._core.levels:\n            if no is None:\n                raise ValueError(\n                    \"Level '%s' does not exist, you have to create it by specifying a level no\"\n                    % name\n                )\n            else:\n                old_color, old_icon = \"\", \" \"\n        elif no is not None:\n            raise TypeError(\"Level '%s' already exists, you can't update its severity no\" % name)\n        else:\n            _, no, old_color, old_icon = self.level(name)\n\n        if color is None:\n            color = old_color\n\n        if icon is None:\n            icon = old_icon\n\n        if not isinstance(no, int):\n            raise TypeError(\n                \"Invalid level no, it should be an integer, not: '%s'\" % type(no).__name__\n            )\n\n        if no < 0:\n            raise ValueError(\"Invalid level no, it should be a positive integer, not: %d\" % no)\n\n        ansi = Colorizer.ansify(color)\n        level = Level(name, no, color, icon)\n\n        with self._core.lock:\n            self._core.levels[name] = level\n            self._core.levels_ansi_codes[name] = ansi\n            for handler in self._core.handlers.values():\n                handler.update_format(name)\n\n        return level\n\n    def disable(self, name):\n        \"\"\"Disable logging of messages coming from ``name`` module and its children.\n\n        Developers of library using `Loguru` should absolutely disable it to avoid disrupting\n        users with unrelated logs messages.\n\n        Note that in some rare circumstances, it is not possible for `Loguru` to\n        determine the module's ``__name__`` value. In such situation, ``record[\"name\"]`` will be\n        equal to ``None``, this is why ``None`` is also a valid argument.\n\n        Parameters\n        ----------\n        name : |str| or ``None``\n            The name of the parent module to disable.\n\n        Examples\n        --------\n        >>> logger.info(\"Allowed message by default\")\n        [22:21:55] Allowed message by default\n        >>> logger.disable(\"my_library\")\n        >>> logger.info(\"While publishing a library, don't forget to disable logging\")\n        \"\"\"\n        self._change_activation(name, False)\n\n    def enable(self, name):\n        \"\"\"Enable logging of messages coming from ``name`` module and its children.\n\n        Logging is generally disabled by imported library using `Loguru`, hence this function\n        allows users to receive these messages anyway.\n\n        To enable all logs regardless of the module they are coming from, an empty string ``\"\"`` can\n        be passed.\n\n        Parameters\n        ----------\n        name : |str| or ``None``\n            The name of the parent module to re-allow.\n\n        Examples\n        --------\n        >>> logger.disable(\"__main__\")\n        >>> logger.info(\"Disabled, so nothing is logged.\")\n        >>> logger.enable(\"__main__\")\n        >>> logger.info(\"Re-enabled, messages are logged.\")\n        [22:46:12] Re-enabled, messages are logged.\n        \"\"\"\n        self._change_activation(name, True)\n\n    def configure(self, *, handlers=None, levels=None, extra=None, patcher=None, activation=None):\n        \"\"\"Configure the core logger.\n\n        It should be noted that ``extra`` values set using this function are available across all\n        modules, so this is the best way to set overall default values.\n\n        Parameters\n        ----------\n        handlers : |list| of |dict|, optional\n            A list of each handler to be added. The list should contain dicts of params passed to\n            the |add| function as keyword arguments. If not ``None``, all previously added\n            handlers are first removed.\n        levels : |list| of |dict|, optional\n            A list of each level to be added or updated. The list should contain dicts of params\n            passed to the |level| function as keyword arguments. This will never remove previously\n            created levels.\n        extra : |dict|, optional\n            A dict containing additional parameters bound to the core logger, useful to share\n            common properties if you call |bind| in several of your files modules. If not ``None``,\n            this will remove previously configured ``extra`` dict.\n        patcher : |callable|_, optional\n            A function that will be applied to the record dict of each logged messages across all\n            modules using the logger. It should modify the dict in-place without returning anything.\n            The function is executed prior to the one possibly added by the |patch| method. If not\n            ``None``, this will replace previously configured ``patcher`` function.\n        activation : |list| of |tuple|, optional\n            A list of ``(name, state)`` tuples which denotes which loggers should be enabled (if\n            ``state`` is ``True``) or disabled (if ``state`` is ``False``). The calls to |enable|\n            and |disable| are made accordingly to the list order. This will not modify previously\n            activated loggers, so if you need a fresh start prepend your list with ``(\"\", False)``\n            or ``(\"\", True)``.\n\n        Returns\n        -------\n        :class:`list` of :class:`int`\n            A list containing the identifiers of added sinks (if any).\n\n        Examples\n        --------\n        >>> logger.configure(\n        ...     handlers=[\n        ...         dict(sink=sys.stderr, format=\"[{time}] {message}\"),\n        ...         dict(sink=\"file.log\", enqueue=True, serialize=True),\n        ...     ],\n        ...     levels=[dict(name=\"NEW\", no=13, icon=\"\u00a4\", color=\"\")],\n        ...     extra={\"common_to_all\": \"default\"},\n        ...     patcher=lambda record: record[\"extra\"].update(some_value=42),\n        ...     activation=[(\"my_module.secret\", False), (\"another_library.module\", True)],\n        ... )\n        [1, 2]\n\n        >>> # Set a default \"extra\" dict to logger across all modules, without \"bind()\"\n        >>> extra = {\"context\": \"foo\"}\n        >>> logger.configure(extra=extra)\n        >>> logger.add(sys.stderr, format=\"{extra[context]} - {message}\")\n        >>> logger.info(\"Context without bind\")\n        >>> # => \"foo - Context without bind\"\n        >>> logger.bind(context=\"bar\").info(\"Suppress global context\")\n        >>> # => \"bar - Suppress global context\"\n        \"\"\"\n        if handlers is not None:\n            self.remove()\n        else:\n            handlers = []\n\n        if levels is not None:\n            for params in levels:\n                self.level(**params)\n\n        if patcher is not None:\n            with self._core.lock:\n                self._core.patcher = patcher\n\n        if extra is not None:\n            with self._core.lock:\n                self._core.extra.clear()\n                self._core.extra.update(extra)\n\n        if activation is not None:\n            for name, state in activation:\n                if state:\n                    self.enable(name)\n                else:\n                    self.disable(name)\n\n        return [self.add(**params) for params in handlers]\n\n    def _change_activation(self, name, status):\n        if not (name is None or isinstance(name, str)):\n            raise TypeError(\n                \"Invalid name, it should be a string (or None), not: '%s'\" % type(name).__name__\n            )\n\n        with self._core.lock:\n            enabled = self._core.enabled.copy()\n\n            if name is None:\n                for n in enabled:\n                    if n is None:\n                        enabled[n] = status\n                self._core.activation_none = status\n                self._core.enabled = enabled\n                return\n\n            if name != \"\":\n                name += \".\"\n\n            activation_list = [\n                (n, s) for n, s in self._core.activation_list if n[: len(name)] != name\n            ]\n\n            parent_status = next((s for n, s in activation_list if name[: len(n)] == n), None)\n            if parent_status != status and not (name == \"\" and status is True):\n                activation_list.append((name, status))\n\n                def modules_depth(x):\n                    return x[0].count(\".\")\n\n                activation_list.sort(key=modules_depth, reverse=True)\n\n            for n in enabled:\n                if n is not None and (n + \".\")[: len(name)] == name:\n                    enabled[n] = status\n\n            self._core.activation_list = activation_list\n            self._core.enabled = enabled\n\n    @staticmethod\n    def parse(file, pattern, *, cast={}, chunk=2**16):  # noqa: B006\n        \"\"\"Parse raw logs and extract each entry as a |dict|.\n\n        The logging format has to be specified as the regex ``pattern``, it will then be\n        used to parse the ``file`` and retrieve each entry based on the named groups present\n        in the regex.\n\n        Parameters\n        ----------\n        file : |str|, |Path| or |file-like object|_\n            The path of the log file to be parsed, or an already opened file object.\n        pattern : |str| or |re.Pattern|_\n            The regex to use for logs parsing, it should contain named groups which will be included\n            in the returned dict.\n        cast : |callable|_ or |dict|, optional\n            A function that should convert in-place the regex groups parsed (a dict of string\n            values) to more appropriate types. If a dict is passed, it should be a mapping between\n            keys of parsed log dict and the function that should be used to convert the associated\n            value.\n        chunk : |int|, optional\n            The number of bytes read while iterating through the logs, this avoids having to load\n            the whole file in memory.\n\n        Yields\n        ------\n        :class:`dict`\n            The dict mapping regex named groups to matched values, as returned by |match.groupdict|\n            and optionally converted according to ``cast`` argument.\n\n        Examples\n        --------\n        >>> reg = r\"(?P<lvl>[0-9]+): (?P<msg>.*)\"    # If log format is \"{level.no} - {message}\"\n        >>> for e in logger.parse(\"file.log\", reg):  # A file line could be \"10 - A debug message\"\n        ...     print(e)                             # => {'lvl': '10', 'msg': 'A debug message'}\n\n        >>> caster = dict(lvl=int)                   # Parse 'lvl' key as an integer\n        >>> for e in logger.parse(\"file.log\", reg, cast=caster):\n        ...     print(e)                             # => {'lvl': 10, 'msg': 'A debug message'}\n\n        >>> def cast(groups):\n        ...     if \"date\" in groups:\n        ...         groups[\"date\"] = datetime.strptime(groups[\"date\"], \"%Y-%m-%d %H:%M:%S\")\n        ...\n        >>> with open(\"file.log\") as file:\n        ...     for log in logger.parse(file, reg, cast=cast):\n        ...         print(log[\"date\"], log[\"something_else\"])\n        \"\"\"\n        if isinstance(file, (str, PathLike)):\n            should_close = True\n            fileobj = open(str(file))\n        elif hasattr(file, \"read\") and callable(file.read):\n            should_close = False\n            fileobj = file\n        else:\n            raise TypeError(\n                \"Invalid file, it should be a string path or a file object, not: '%s'\"\n                % type(file).__name__\n            )\n\n        if isinstance(cast, dict):\n\n            def cast_function(groups):\n                for key, converter in cast.items():\n                    if key in groups:\n                        groups[key] = converter(groups[key])\n\n        elif callable(cast):\n            cast_function = cast\n        else:\n            raise TypeError(\n                \"Invalid cast, it should be a function or a dict, not: '%s'\" % type(cast).__name__\n            )\n\n        try:\n            regex = re.compile(pattern)\n        except TypeError:\n            raise TypeError(\n                \"Invalid pattern, it should be a string or a compiled regex, not: '%s'\"\n                % type(pattern).__name__\n            ) from None\n\n        matches = Logger._find_iter(fileobj, regex, chunk)\n\n        for match in matches:\n            groups = match.groupdict()\n            cast_function(groups)\n            yield groups\n\n        if should_close:\n            fileobj.close()\n\n    @staticmethod\n    def _find_iter(fileobj, regex, chunk):\n        buffer = fileobj.read(0)\n\n        while 1:\n            text = fileobj.read(chunk)\n            buffer += text\n            matches = list(regex.finditer(buffer))\n\n            if not text:\n                yield from matches\n                break\n\n            if len(matches) > 1:\n                end = matches[-2].end()\n                buffer = buffer[end:]\n                yield from matches[:-1]\n\n    def _log(self, level_id, static_level_no, from_decorator, options, message, args, kwargs):\n        core = self._core\n\n        if not core.handlers:\n            return\n\n        (exception, depth, record, lazy, colors, raw, capture, patchers, extra) = options\n\n        frame = get_frame(depth + 2)\n\n        try:\n            name = frame.f_globals[\"__name__\"]\n        except KeyError:\n            name = None\n\n        try:\n            if not core.enabled[name]:\n                return\n        except KeyError:\n            enabled = core.enabled\n            if name is None:\n                status = core.activation_none\n                enabled[name] = status\n                if not status:\n                    return\n            else:\n                dotted_name = name + \".\"\n                for dotted_module_name, status in core.activation_list:\n                    if dotted_name[: len(dotted_module_name)] == dotted_module_name:\n                        if status:\n                            break\n                        enabled[name] = False\n                        return\n                enabled[name] = True\n\n        if level_id is None:\n            level_icon = \" \"\n            level_no = static_level_no\n            level_name = \"Level %d\" % level_no\n        else:\n            try:\n                level_name, level_no, _, level_icon = core.levels[level_id]\n            except KeyError:\n                raise ValueError(\"Level '%s' does not exist\" % level_id) from None\n\n        if level_no < core.min_level:\n            return\n\n        current_datetime = aware_now()\n\n        code = frame.f_code\n        file_path = code.co_filename\n        file_name = basename(file_path)\n        thread = current_thread()\n        process = current_process()\n        elapsed = current_datetime - start_time\n\n        if exception:\n            if isinstance(exception, BaseException):\n                type_, value, traceback = (type(exception), exception, exception.__traceback__)\n            elif isinstance(exception, tuple):\n                type_, value, traceback = exception\n            else:\n                type_, value, traceback = sys.exc_info()\n            exception = RecordException(type_, value, traceback)\n        else:\n            exception = None\n\n        log_record = {\n            \"elapsed\": elapsed,\n            \"exception\": exception,\n            \"extra\": {**core.extra, **context.get(), **extra},\n            \"file\": RecordFile(file_name, file_path),\n            \"function\": code.co_name,\n            \"level\": RecordLevel(level_name, level_no, level_icon),\n            \"line\": frame.f_lineno,\n            \"message\": str(message),\n            \"module\": splitext(file_name)[0],\n            \"name\": name,\n            \"process\": RecordProcess(process.ident, process.name),\n            \"thread\": RecordThread(thread.ident, thread.name),\n            \"time\": current_datetime,\n        }\n\n        if lazy:\n            args = [arg() for arg in args]\n            kwargs = {key: value() for key, value in kwargs.items()}\n\n        if capture and kwargs:\n            log_record[\"extra\"].update(kwargs)\n\n        if record:\n            if \"record\" in kwargs:\n                raise TypeError(\n                    \"The message can't be formatted: 'record' shall not be used as a keyword \"\n                    \"argument while logger has been configured with '.opt(record=True)'\"\n                )\n            kwargs.update(record=log_record)\n\n        if colors:\n            if args or kwargs:\n                colored_message = Colorizer.prepare_message(message, args, kwargs)\n            else:\n                colored_message = Colorizer.prepare_simple_message(str(message))\n            log_record[\"message\"] = colored_message.stripped\n        elif args or kwargs:\n            colored_message = None\n            log_record[\"message\"] = message.format(*args, **kwargs)\n        else:\n            colored_message = None\n\n        if core.patcher:\n            core.patcher(log_record)\n\n        for patcher in patchers:\n            patcher(log_record)\n\n        for handler in core.handlers.values():\n            handler.emit(log_record, level_id, from_decorator, raw, colored_message)\n\n    def trace(__self, __message, *args, **kwargs):  # noqa: N805\n        r\"\"\"Log ``message.format(*args, **kwargs)`` with severity ``'TRACE'``.\"\"\"\n        __self._log(\"TRACE\", None, False, __self._options, __message, args, kwargs)\n\n    def debug(__self, __message, *args, **kwargs):  # noqa: N805\n        r\"\"\"Log ``message.format(*args, **kwargs)`` with severity ``'DEBUG'``.\"\"\"\n        __self._log(\"DEBUG\", None, False, __self._options, __message, args, kwargs)\n\n    def info(__self, __message, *args, **kwargs):  # noqa: N805\n        r\"\"\"Log ``message.format(*args, **kwargs)`` with severity ``'INFO'``.\"\"\"\n        __self._log(\"INFO\", None, False, __self._options, __message, args, kwargs)\n\n    def success(__self, __message, *args, **kwargs):  # noqa: N805\n        r\"\"\"Log ``message.format(*args, **kwargs)`` with severity ``'SUCCESS'``.\"\"\"\n        __self._log(\"SUCCESS\", None, False, __self._options, __message, args, kwargs)\n\n    def warning(__self, __message, *args, **kwargs):  # noqa: N805\n        r\"\"\"Log ``message.format(*args, **kwargs)`` with severity ``'WARNING'``.\"\"\"\n        __self._log(\"WARNING\", None, False, __self._options, __message, args, kwargs)\n\n    def error(__self, __message, *args, **kwargs):  # noqa: N805\n        r\"\"\"Log ``message.format(*args, **kwargs)`` with severity ``'ERROR'``.\"\"\"\n        __self._log(\"ERROR\", None, False, __self._options, __message, args, kwargs)\n\n    def critical(__self, __message, *args, **kwargs):  # noqa: N805\n        r\"\"\"Log ``message.format(*args, **kwargs)`` with severity ``'CRITICAL'``.\"\"\"\n        __self._log(\"CRITICAL\", None, False, __self._options, __message, args, kwargs)\n\n    def exception(__self, __message, *args, **kwargs):  # noqa: N805\n        r\"\"\"Convenience method for logging an ``'ERROR'`` with exception information.\"\"\"\n        options = (True,) + __self._options[1:]\n        __self._log(\"ERROR\", None, False, options, __message, args, kwargs)\n\n    def log(__self, __level, __message, *args, **kwargs):  # noqa: N805\n        r\"\"\"Log ``message.format(*args, **kwargs)`` with severity ``level``.\"\"\"\n        level_id, static_level_no = __self._dynamic_level(__level)\n        __self._log(level_id, static_level_no, False, __self._options, __message, args, kwargs)\n\n    @staticmethod\n    @functools.lru_cache(maxsize=32)\n    def _dynamic_level(level):\n\n        if isinstance(level, str):\n            return (level, None)\n\n        if isinstance(level, int):\n            if level < 0:\n                raise ValueError(\n                    \"Invalid level value, it should be a positive integer, not: %d\" % level\n                )\n            return (None, level)\n\n        raise TypeError(\n            \"Invalid level, it should be an integer or a string, not: '%s'\" % type(level).__name__\n        )\n\n    def start(self, *args, **kwargs):\n        \"\"\"Deprecated function to |add| a new handler.\n\n        Warnings\n        --------\n        .. deprecated:: 0.2.2\n          ``start()`` will be removed in Loguru 1.0.0, it is replaced by ``add()`` which is a less\n          confusing name.\n        \"\"\"\n        warnings.warn(\n            \"The 'start()' method is deprecated, please use 'add()' instead\", DeprecationWarning\n        )\n        return self.add(*args, **kwargs)\n\n    def stop(self, *args, **kwargs):\n        \"\"\"Deprecated function to |remove| an existing handler.\n\n        Warnings\n        --------\n        .. deprecated:: 0.2.2\n          ``stop()`` will be removed in Loguru 1.0.0, it is replaced by ``remove()`` which is a less\n          confusing name.\n        \"\"\"\n        warnings.warn(\n            \"The 'stop()' method is deprecated, please use 'remove()' instead\", DeprecationWarning\n        )\n        return self.remove(*args, **kwargs)\n",
    "loguru/_simple_sinks.py": "import asyncio\nimport logging\nimport weakref\n\nfrom ._asyncio_loop import get_running_loop, get_task_loop\n\n\nclass StreamSink:\n    def __init__(self, stream):\n        self._stream = stream\n        self._flushable = callable(getattr(stream, \"flush\", None))\n        self._stoppable = callable(getattr(stream, \"stop\", None))\n        self._completable = asyncio.iscoroutinefunction(getattr(stream, \"complete\", None))\n\n    def write(self, message):\n        self._stream.write(message)\n        if self._flushable:\n            self._stream.flush()\n\n    def stop(self):\n        if self._stoppable:\n            self._stream.stop()\n\n    async def complete(self):\n        if self._completable:\n            await self._stream.complete()\n\n\nclass StandardSink:\n    def __init__(self, handler):\n        self._handler = handler\n\n    def write(self, message):\n        record = message.record\n        message = str(message)\n        exc = record[\"exception\"]\n        record = logging.getLogger().makeRecord(\n            record[\"name\"],\n            record[\"level\"].no,\n            record[\"file\"].path,\n            record[\"line\"],\n            message,\n            (),\n            (exc.type, exc.value, exc.traceback) if exc else None,\n            record[\"function\"],\n            {\"extra\": record[\"extra\"]},\n        )\n        if exc:\n            record.exc_text = \"\\n\"\n        self._handler.handle(record)\n\n    def stop(self):\n        self._handler.close()\n\n    async def complete(self):\n        pass\n\n\nclass AsyncSink:\n    def __init__(self, function, loop, error_interceptor):\n        self._function = function\n        self._loop = loop\n        self._error_interceptor = error_interceptor\n        self._tasks = weakref.WeakSet()\n\n    def write(self, message):\n        try:\n            loop = self._loop or get_running_loop()\n        except RuntimeError:\n            return\n\n        coroutine = self._function(message)\n        task = loop.create_task(coroutine)\n\n        def check_exception(future):\n            if future.cancelled() or future.exception() is None:\n                return\n            if not self._error_interceptor.should_catch():\n                raise future.exception()\n            self._error_interceptor.print(message.record, exception=future.exception())\n\n        task.add_done_callback(check_exception)\n        self._tasks.add(task)\n\n    def stop(self):\n        for task in self._tasks:\n            task.cancel()\n\n    async def complete(self):\n        loop = get_running_loop()\n        for task in self._tasks:\n            if get_task_loop(task) is loop:\n                try:\n                    await task\n                except Exception:\n                    pass  # Handled in \"check_exception()\"\n\n    def __getstate__(self):\n        state = self.__dict__.copy()\n        state[\"_tasks\"] = None\n        return state\n\n    def __setstate__(self, state):\n        self.__dict__.update(state)\n        self._tasks = weakref.WeakSet()\n\n\nclass CallableSink:\n    def __init__(self, function):\n        self._function = function\n\n    def write(self, message):\n        self._function(message)\n\n    def stop(self):\n        pass\n\n    async def complete(self):\n        pass\n",
    "loguru/_locks_machinery.py": "import os\nimport threading\nimport weakref\n\nif not hasattr(os, \"register_at_fork\"):\n\n    def create_logger_lock():\n        return threading.Lock()\n\n    def create_handler_lock():\n        return threading.Lock()\n\nelse:\n    # While forking, we need to sanitize all locks to make sure the child process doesn't run into\n    # a deadlock (if a lock already acquired is inherited) and to protect sink from corrupted state.\n    # It's very important to acquire logger locks before handlers one to prevent possible deadlock\n    # while 'remove()' is called for example.\n\n    logger_locks = weakref.WeakSet()\n    handler_locks = weakref.WeakSet()\n\n    def acquire_locks():\n        for lock in logger_locks:\n            lock.acquire()\n\n        for lock in handler_locks:\n            lock.acquire()\n\n    def release_locks():\n        for lock in logger_locks:\n            lock.release()\n\n        for lock in handler_locks:\n            lock.release()\n\n    os.register_at_fork(\n        before=acquire_locks,\n        after_in_parent=release_locks,\n        after_in_child=release_locks,\n    )\n\n    def create_logger_lock():\n        lock = threading.Lock()\n        logger_locks.add(lock)\n        return lock\n\n    def create_handler_lock():\n        lock = threading.Lock()\n        handler_locks.add(lock)\n        return lock\n",
    "loguru/_datetime.py": "import re\nfrom calendar import day_abbr, day_name, month_abbr, month_name\nfrom datetime import datetime as datetime_\nfrom datetime import timedelta, timezone\nfrom time import localtime, strftime\n\ntokens = r\"H{1,2}|h{1,2}|m{1,2}|s{1,2}|S{1,6}|YYYY|YY|M{1,4}|D{1,4}|Z{1,2}|zz|A|X|x|E|Q|dddd|ddd|d\"\n\npattern = re.compile(r\"(?:{0})|\\[(?:{0}|!UTC)\\]\".format(tokens))\n\n\nclass datetime(datetime_):  # noqa: N801\n    def __format__(self, spec):\n        if spec.endswith(\"!UTC\"):\n            dt = self.astimezone(timezone.utc)\n            spec = spec[:-4]\n        else:\n            dt = self\n\n        if not spec:\n            spec = \"%Y-%m-%dT%H:%M:%S.%f%z\"\n\n        if \"%\" in spec:\n            return datetime_.__format__(dt, spec)\n\n        year, month, day, hour, minute, second, weekday, yearday, _ = dt.timetuple()\n        microsecond = dt.microsecond\n        timestamp = dt.timestamp()\n        tzinfo = dt.tzinfo or timezone(timedelta(seconds=0))\n        offset = tzinfo.utcoffset(dt).total_seconds()\n        sign = (\"-\", \"+\")[offset >= 0]\n        h, m = divmod(abs(offset // 60), 60)\n\n        rep = {\n            \"YYYY\": \"%04d\" % year,\n            \"YY\": \"%02d\" % (year % 100),\n            \"Q\": \"%d\" % ((month - 1) // 3 + 1),\n            \"MMMM\": month_name[month],\n            \"MMM\": month_abbr[month],\n            \"MM\": \"%02d\" % month,\n            \"M\": \"%d\" % month,\n            \"DDDD\": \"%03d\" % yearday,\n            \"DDD\": \"%d\" % yearday,\n            \"DD\": \"%02d\" % day,\n            \"D\": \"%d\" % day,\n            \"dddd\": day_name[weekday],\n            \"ddd\": day_abbr[weekday],\n            \"d\": \"%d\" % weekday,\n            \"E\": \"%d\" % (weekday + 1),\n            \"HH\": \"%02d\" % hour,\n            \"H\": \"%d\" % hour,\n            \"hh\": \"%02d\" % ((hour - 1) % 12 + 1),\n            \"h\": \"%d\" % ((hour - 1) % 12 + 1),\n            \"mm\": \"%02d\" % minute,\n            \"m\": \"%d\" % minute,\n            \"ss\": \"%02d\" % second,\n            \"s\": \"%d\" % second,\n            \"S\": \"%d\" % (microsecond // 100000),\n            \"SS\": \"%02d\" % (microsecond // 10000),\n            \"SSS\": \"%03d\" % (microsecond // 1000),\n            \"SSSS\": \"%04d\" % (microsecond // 100),\n            \"SSSSS\": \"%05d\" % (microsecond // 10),\n            \"SSSSSS\": \"%06d\" % microsecond,\n            \"A\": (\"AM\", \"PM\")[hour // 12],\n            \"Z\": \"%s%02d:%02d\" % (sign, h, m),\n            \"ZZ\": \"%s%02d%02d\" % (sign, h, m),\n            \"zz\": tzinfo.tzname(dt) or \"\",\n            \"X\": \"%d\" % timestamp,\n            \"x\": \"%d\" % (int(timestamp) * 1000000 + microsecond),\n        }\n\n        def get(m):\n            try:\n                return rep[m.group(0)]\n            except KeyError:\n                return m.group(0)[1:-1]\n\n        return pattern.sub(get, spec)\n\n\ndef aware_now():\n    now = datetime_.now()\n    timestamp = now.timestamp()\n    local = localtime(timestamp)\n\n    try:\n        seconds = local.tm_gmtoff\n        zone = local.tm_zone\n    except AttributeError:\n        offset = datetime_.fromtimestamp(timestamp) - datetime_.utcfromtimestamp(timestamp)\n        seconds = offset.total_seconds()\n        zone = strftime(\"%Z\")\n\n    tzinfo = timezone(timedelta(seconds=seconds), zone)\n\n    return datetime.combine(now.date(), now.time().replace(tzinfo=tzinfo))\n",
    "loguru/_asyncio_loop.py": "import asyncio\nimport sys\n\n\ndef load_loop_functions():\n    if sys.version_info >= (3, 7):\n\n        def get_task_loop(task):\n            return task.get_loop()\n\n        get_running_loop = asyncio.get_running_loop\n\n    else:\n\n        def get_task_loop(task):\n            return task._loop\n\n        def get_running_loop():\n            loop = asyncio.get_event_loop()\n            if not loop.is_running():\n                raise RuntimeError(\"There is no running event loop\")\n            return loop\n\n    return get_task_loop, get_running_loop\n\n\nget_task_loop, get_running_loop = load_loop_functions()\n",
    "loguru/_string_parsers.py": "import datetime\nimport re\n\n\nclass Frequencies:\n    @staticmethod\n    def hourly(t):\n        dt = t + datetime.timedelta(hours=1)\n        return dt.replace(minute=0, second=0, microsecond=0)\n\n    @staticmethod\n    def daily(t):\n        dt = t + datetime.timedelta(days=1)\n        return dt.replace(hour=0, minute=0, second=0, microsecond=0)\n\n    @staticmethod\n    def weekly(t):\n        dt = t + datetime.timedelta(days=7 - t.weekday())\n        return dt.replace(hour=0, minute=0, second=0, microsecond=0)\n\n    @staticmethod\n    def monthly(t):\n        if t.month == 12:\n            y, m = t.year + 1, 1\n        else:\n            y, m = t.year, t.month + 1\n        return t.replace(year=y, month=m, day=1, hour=0, minute=0, second=0, microsecond=0)\n\n    @staticmethod\n    def yearly(t):\n        y = t.year + 1\n        return t.replace(year=y, month=1, day=1, hour=0, minute=0, second=0, microsecond=0)\n\n\ndef parse_size(size):\n    size = size.strip()\n    reg = re.compile(r\"([e\\+\\-\\.\\d]+)\\s*([kmgtpezy])?(i)?(b)\", flags=re.I)\n\n    match = reg.fullmatch(size)\n\n    if not match:\n        return None\n\n    s, u, i, b = match.groups()\n\n    try:\n        s = float(s)\n    except ValueError as e:\n        raise ValueError(\"Invalid float value while parsing size: '%s'\" % s) from e\n\n    u = \"kmgtpezy\".index(u.lower()) + 1 if u else 0\n    i = 1024 if i else 1000\n    b = {\"b\": 8, \"B\": 1}[b] if b else 1\n    size = s * i**u / b\n\n    return size\n\n\ndef parse_duration(duration):\n    duration = duration.strip()\n    reg = r\"(?:([e\\+\\-\\.\\d]+)\\s*([a-z]+)[\\s\\,]*)\"\n\n    units = [\n        (\"y|years?\", 31536000),\n        (\"months?\", 2628000),\n        (\"w|weeks?\", 604800),\n        (\"d|days?\", 86400),\n        (\"h|hours?\", 3600),\n        (\"min(?:ute)?s?\", 60),\n        (\"s|sec(?:ond)?s?\", 1),\n        (\"ms|milliseconds?\", 0.001),\n        (\"us|microseconds?\", 0.000001),\n    ]\n\n    if not re.fullmatch(reg + \"+\", duration, flags=re.I):\n        return None\n\n    seconds = 0\n\n    for value, unit in re.findall(reg, duration, flags=re.I):\n        try:\n            value = float(value)\n        except ValueError as e:\n            raise ValueError(\"Invalid float value while parsing duration: '%s'\" % value) from e\n\n        try:\n            unit = next(u for r, u in units if re.fullmatch(r, unit, flags=re.I))\n        except StopIteration:\n            raise ValueError(\"Invalid unit value while parsing duration: '%s'\" % unit) from None\n\n        seconds += value * unit\n\n    return datetime.timedelta(seconds=seconds)\n\n\ndef parse_frequency(frequency):\n    frequencies = {\n        \"hourly\": Frequencies.hourly,\n        \"daily\": Frequencies.daily,\n        \"weekly\": Frequencies.weekly,\n        \"monthly\": Frequencies.monthly,\n        \"yearly\": Frequencies.yearly,\n    }\n    frequency = frequency.strip().lower()\n    return frequencies.get(frequency, None)\n\n\ndef parse_day(day):\n    days = {\n        \"monday\": 0,\n        \"tuesday\": 1,\n        \"wednesday\": 2,\n        \"thursday\": 3,\n        \"friday\": 4,\n        \"saturday\": 5,\n        \"sunday\": 6,\n    }\n    day = day.strip().lower()\n    if day in days:\n        return days[day]\n    elif day.startswith(\"w\") and day[1:].isdigit():\n        day = int(day[1:])\n        if not 0 <= day < 7:\n            raise ValueError(\"Invalid weekday value while parsing day (expected [0-6]): '%d'\" % day)\n    else:\n        day = None\n\n    return day\n\n\ndef parse_time(time):\n    time = time.strip()\n    reg = re.compile(r\"^[\\d\\.\\:]+\\s*(?:[ap]m)?$\", flags=re.I)\n\n    if not reg.match(time):\n        return None\n\n    formats = [\n        \"%H\",\n        \"%H:%M\",\n        \"%H:%M:%S\",\n        \"%H:%M:%S.%f\",\n        \"%I %p\",\n        \"%I:%M %S\",\n        \"%I:%M:%S %p\",\n        \"%I:%M:%S.%f %p\",\n    ]\n\n    for format_ in formats:\n        try:\n            dt = datetime.datetime.strptime(time, format_)\n        except ValueError:\n            pass\n        else:\n            return dt.time()\n\n    raise ValueError(\"Unrecognized format while parsing time: '%s'\" % time)\n\n\ndef parse_daytime(daytime):\n    daytime = daytime.strip()\n    reg = re.compile(r\"^(.*?)\\s+at\\s+(.*)$\", flags=re.I)\n\n    match = reg.match(daytime)\n    if match:\n        day, time = match.groups()\n    else:\n        day = time = daytime\n\n    try:\n        day = parse_day(day)\n        if match and day is None:\n            raise ValueError\n    except ValueError as e:\n        raise ValueError(\"Invalid day while parsing daytime: '%s'\" % day) from e\n\n    try:\n        time = parse_time(time)\n        if match and time is None:\n            raise ValueError\n    except ValueError as e:\n        raise ValueError(\"Invalid time while parsing daytime: '%s'\" % time) from e\n\n    if day is None and time is None:\n        return None\n\n    return day, time\n",
    "loguru/_error_interceptor.py": "import sys\nimport traceback\n\n\nclass ErrorInterceptor:\n    def __init__(self, should_catch, handler_id):\n        self._should_catch = should_catch\n        self._handler_id = handler_id\n\n    def should_catch(self):\n        return self._should_catch\n\n    def print(self, record=None, *, exception=None):\n        if not sys.stderr:\n            return\n\n        if exception is None:\n            type_, value, traceback_ = sys.exc_info()\n        else:\n            type_, value, traceback_ = (type(exception), exception, exception.__traceback__)\n\n        try:\n            sys.stderr.write(\"--- Logging error in Loguru Handler #%d ---\\n\" % self._handler_id)\n            try:\n                record_repr = str(record)\n            except Exception:\n                record_repr = \"/!\\\\ Unprintable record /!\\\\\"\n            sys.stderr.write(\"Record was: %s\\n\" % record_repr)\n            traceback.print_exception(type_, value, traceback_, None, sys.stderr)\n            sys.stderr.write(\"--- End of logging error ---\\n\")\n        except OSError:\n            pass\n        finally:\n            del type_, value, traceback_\n",
    "loguru/_contextvars.py": "import sys\n\n\ndef load_contextvar_class():\n    if sys.version_info >= (3, 7):\n        from contextvars import ContextVar\n    elif sys.version_info >= (3, 5, 3):\n        from aiocontextvars import ContextVar\n    else:\n        from contextvars import ContextVar\n\n    return ContextVar\n\n\nContextVar = load_contextvar_class()\n",
    "loguru/_ctime_functions.py": "import os\n\n\ndef load_ctime_functions():\n    if os.name == \"nt\":\n        import win32_setctime\n\n        def get_ctime_windows(filepath):\n            return os.stat(filepath).st_ctime\n\n        def set_ctime_windows(filepath, timestamp):\n            if not win32_setctime.SUPPORTED:\n                return\n\n            try:\n                win32_setctime.setctime(filepath, timestamp)\n            except (OSError, ValueError):\n                pass\n\n        return get_ctime_windows, set_ctime_windows\n\n    elif hasattr(os.stat_result, \"st_birthtime\"):\n\n        def get_ctime_macos(filepath):\n            return os.stat(filepath).st_birthtime\n\n        def set_ctime_macos(filepath, timestamp):\n            pass\n\n        return get_ctime_macos, set_ctime_macos\n\n    elif hasattr(os, \"getxattr\") and hasattr(os, \"setxattr\"):\n\n        def get_ctime_linux(filepath):\n            try:\n                return float(os.getxattr(filepath, b\"user.loguru_crtime\"))\n            except OSError:\n                return os.stat(filepath).st_mtime\n\n        def set_ctime_linux(filepath, timestamp):\n            try:\n                os.setxattr(filepath, b\"user.loguru_crtime\", str(timestamp).encode(\"ascii\"))\n            except OSError:\n                pass\n\n        return get_ctime_linux, set_ctime_linux\n\n    def get_ctime_fallback(filepath):\n        return os.stat(filepath).st_mtime\n\n    def set_ctime_fallback(filepath, timestamp):\n        pass\n\n    return get_ctime_fallback, set_ctime_fallback\n\n\nget_ctime, set_ctime = load_ctime_functions()\n",
    "loguru/_handler.py": "import functools\nimport json\nimport multiprocessing\nimport os\nimport threading\nfrom contextlib import contextmanager\nfrom threading import Thread\n\nfrom ._colorizer import Colorizer\nfrom ._locks_machinery import create_handler_lock\n\n\ndef prepare_colored_format(format_, ansi_level):\n    colored = Colorizer.prepare_format(format_)\n    return colored, colored.colorize(ansi_level)\n\n\ndef prepare_stripped_format(format_):\n    colored = Colorizer.prepare_format(format_)\n    return colored.strip()\n\n\ndef memoize(function):\n    return functools.lru_cache(maxsize=64)(function)\n\n\nclass Message(str):\n    __slots__ = (\"record\",)\n\n\nclass Handler:\n    def __init__(\n        self,\n        *,\n        sink,\n        name,\n        levelno,\n        formatter,\n        is_formatter_dynamic,\n        filter_,\n        colorize,\n        serialize,\n        enqueue,\n        error_interceptor,\n        exception_formatter,\n        id_,\n        levels_ansi_codes\n    ):\n        self._name = name\n        self._sink = sink\n        self._levelno = levelno\n        self._formatter = formatter\n        self._is_formatter_dynamic = is_formatter_dynamic\n        self._filter = filter_\n        self._colorize = colorize\n        self._serialize = serialize\n        self._enqueue = enqueue\n        self._error_interceptor = error_interceptor\n        self._exception_formatter = exception_formatter\n        self._id = id_\n        self._levels_ansi_codes = levels_ansi_codes  # Warning, reference shared among handlers\n\n        self._decolorized_format = None\n        self._precolorized_formats = {}\n        self._memoize_dynamic_format = None\n\n        self._stopped = False\n        self._lock = create_handler_lock()\n        self._lock_acquired = threading.local()\n        self._queue = None\n        self._confirmation_event = None\n        self._confirmation_lock = None\n        self._owner_process_pid = None\n        self._thread = None\n\n        if self._is_formatter_dynamic:\n            if self._colorize:\n                self._memoize_dynamic_format = memoize(prepare_colored_format)\n            else:\n                self._memoize_dynamic_format = memoize(prepare_stripped_format)\n        else:\n            if self._colorize:\n                for level_name in self._levels_ansi_codes:\n                    self.update_format(level_name)\n            else:\n                self._decolorized_format = self._formatter.strip()\n\n        if self._enqueue:\n            self._queue = multiprocessing.SimpleQueue()\n            self._confirmation_event = multiprocessing.Event()\n            self._confirmation_lock = multiprocessing.Lock()\n            self._owner_process_pid = os.getpid()\n            self._thread = Thread(\n                target=self._queued_writer, daemon=True, name=\"loguru-writer-%d\" % self._id\n            )\n            self._thread.start()\n\n    def __repr__(self):\n        return \"(id=%d, level=%d, sink=%s)\" % (self._id, self._levelno, self._name)\n\n    @contextmanager\n    def _protected_lock(self):\n        \"\"\"Acquire the lock, but fail fast if its already acquired by the current thread.\"\"\"\n        if getattr(self._lock_acquired, \"acquired\", False):\n            raise RuntimeError(\n                \"Could not acquire internal lock because it was already in use (deadlock avoided). \"\n                \"This likely happened because the logger was re-used inside a sink, a signal \"\n                \"handler or a '__del__' method. This is not permitted because the logger and its \"\n                \"handlers are not re-entrant.\"\n            )\n        self._lock_acquired.acquired = True\n        try:\n            self._lock.acquire()\n            yield\n        finally:\n            self._lock.release()\n            self._lock_acquired.acquired = False\n\n    def emit(self, record, level_id, from_decorator, is_raw, colored_message):\n        try:\n            if self._levelno > record[\"level\"].no:\n                return\n\n            if self._filter is not None:\n                if not self._filter(record):\n                    return\n\n            if self._is_formatter_dynamic:\n                dynamic_format = self._formatter(record)\n\n            formatter_record = record.copy()\n\n            if not record[\"exception\"]:\n                formatter_record[\"exception\"] = \"\"\n            else:\n                type_, value, tb = record[\"exception\"]\n                formatter = self._exception_formatter\n                lines = formatter.format_exception(type_, value, tb, from_decorator=from_decorator)\n                formatter_record[\"exception\"] = \"\".join(lines)\n\n            if colored_message is not None and colored_message.stripped != record[\"message\"]:\n                colored_message = None\n\n            if is_raw:\n                if colored_message is None or not self._colorize:\n                    formatted = record[\"message\"]\n                else:\n                    ansi_level = self._levels_ansi_codes[level_id]\n                    formatted = colored_message.colorize(ansi_level)\n            elif self._is_formatter_dynamic:\n                if not self._colorize:\n                    precomputed_format = self._memoize_dynamic_format(dynamic_format)\n                    formatted = precomputed_format.format_map(formatter_record)\n                elif colored_message is None:\n                    ansi_level = self._levels_ansi_codes[level_id]\n                    _, precomputed_format = self._memoize_dynamic_format(dynamic_format, ansi_level)\n                    formatted = precomputed_format.format_map(formatter_record)\n                else:\n                    ansi_level = self._levels_ansi_codes[level_id]\n                    formatter, precomputed_format = self._memoize_dynamic_format(\n                        dynamic_format, ansi_level\n                    )\n                    coloring_message = formatter.make_coloring_message(\n                        record[\"message\"], ansi_level=ansi_level, colored_message=colored_message\n                    )\n                    formatter_record[\"message\"] = coloring_message\n                    formatted = precomputed_format.format_map(formatter_record)\n\n            else:\n                if not self._colorize:\n                    precomputed_format = self._decolorized_format\n                    formatted = precomputed_format.format_map(formatter_record)\n                elif colored_message is None:\n                    ansi_level = self._levels_ansi_codes[level_id]\n                    precomputed_format = self._precolorized_formats[level_id]\n                    formatted = precomputed_format.format_map(formatter_record)\n                else:\n                    ansi_level = self._levels_ansi_codes[level_id]\n                    precomputed_format = self._precolorized_formats[level_id]\n                    coloring_message = self._formatter.make_coloring_message(\n                        record[\"message\"], ansi_level=ansi_level, colored_message=colored_message\n                    )\n                    formatter_record[\"message\"] = coloring_message\n                    formatted = precomputed_format.format_map(formatter_record)\n\n            if self._serialize:\n                formatted = self._serialize_record(formatted, record)\n\n            str_record = Message(formatted)\n            str_record.record = record\n\n            with self._protected_lock():\n                if self._stopped:\n                    return\n                if self._enqueue:\n                    self._queue.put(str_record)\n                else:\n                    self._sink.write(str_record)\n        except Exception:\n            if not self._error_interceptor.should_catch():\n                raise\n            self._error_interceptor.print(record)\n\n    def stop(self):\n        with self._protected_lock():\n            self._stopped = True\n            if self._enqueue:\n                if self._owner_process_pid != os.getpid():\n                    return\n                self._queue.put(None)\n                self._thread.join()\n                if hasattr(self._queue, \"close\"):\n                    self._queue.close()\n\n            self._sink.stop()\n\n    def complete_queue(self):\n        if not self._enqueue:\n            return\n\n        with self._confirmation_lock:\n            self._queue.put(True)\n            self._confirmation_event.wait()\n            self._confirmation_event.clear()\n\n    async def complete_async(self):\n        if self._enqueue and self._owner_process_pid != os.getpid():\n            return\n\n        with self._protected_lock():\n            await self._sink.complete()\n\n    def update_format(self, level_id):\n        if not self._colorize or self._is_formatter_dynamic:\n            return\n        ansi_code = self._levels_ansi_codes[level_id]\n        self._precolorized_formats[level_id] = self._formatter.colorize(ansi_code)\n\n    @property\n    def levelno(self):\n        return self._levelno\n\n    @staticmethod\n    def _serialize_record(text, record):\n        exception = record[\"exception\"]\n\n        if exception is not None:\n            exception = {\n                \"type\": None if exception.type is None else exception.type.__name__,\n                \"value\": exception.value,\n                \"traceback\": bool(exception.traceback),\n            }\n\n        serializable = {\n            \"text\": text,\n            \"record\": {\n                \"elapsed\": {\n                    \"repr\": record[\"elapsed\"],\n                    \"seconds\": record[\"elapsed\"].total_seconds(),\n                },\n                \"exception\": exception,\n                \"extra\": record[\"extra\"],\n                \"file\": {\"name\": record[\"file\"].name, \"path\": record[\"file\"].path},\n                \"function\": record[\"function\"],\n                \"level\": {\n                    \"icon\": record[\"level\"].icon,\n                    \"name\": record[\"level\"].name,\n                    \"no\": record[\"level\"].no,\n                },\n                \"line\": record[\"line\"],\n                \"message\": record[\"message\"],\n                \"module\": record[\"module\"],\n                \"name\": record[\"name\"],\n                \"process\": {\"id\": record[\"process\"].id, \"name\": record[\"process\"].name},\n                \"thread\": {\"id\": record[\"thread\"].id, \"name\": record[\"thread\"].name},\n                \"time\": {\"repr\": record[\"time\"], \"timestamp\": record[\"time\"].timestamp()},\n            },\n        }\n\n        return json.dumps(serializable, default=str, ensure_ascii=False) + \"\\n\"\n\n    def _queued_writer(self):\n        message = None\n        queue = self._queue\n\n        # We need to use a lock to protect sink during fork.\n        # Particularly, writing to stderr may lead to deadlock in child process.\n        lock = create_handler_lock()\n\n        while True:\n            try:\n                message = queue.get()\n            except Exception:\n                with lock:\n                    if not self._error_interceptor.should_catch():\n                        self._confirmation_event.set()\n                        raise\n                    self._error_interceptor.print(None)\n                continue\n\n            if message is None:\n                break\n\n            if message is True:\n                self._confirmation_event.set()\n                continue\n\n            with lock:\n                try:\n                    self._sink.write(message)\n                except Exception:\n                    if not self._error_interceptor.should_catch():\n                        self._confirmation_event.set()\n                        raise\n                    self._error_interceptor.print(message.record)\n\n    def __getstate__(self):\n        state = self.__dict__.copy()\n        state[\"_lock\"] = None\n        state[\"_lock_acquired\"] = None\n        state[\"_memoize_dynamic_format\"] = None\n        if self._enqueue:\n            state[\"_sink\"] = None\n            state[\"_thread\"] = None\n            state[\"_owner_process\"] = None\n        return state\n\n    def __setstate__(self, state):\n        self.__dict__.update(state)\n        self._lock = create_handler_lock()\n        self._lock_acquired = threading.local()\n        if self._is_formatter_dynamic:\n            if self._colorize:\n                self._memoize_dynamic_format = memoize(prepare_colored_format)\n            else:\n                self._memoize_dynamic_format = memoize(prepare_stripped_format)\n",
    "loguru/_colorizer.py": "import re\nfrom string import Formatter\n\n\nclass Style:\n    RESET_ALL = 0\n    BOLD = 1\n    DIM = 2\n    ITALIC = 3\n    UNDERLINE = 4\n    BLINK = 5\n    REVERSE = 7\n    STRIKE = 8\n    HIDE = 9\n    NORMAL = 22\n\n\nclass Fore:\n    BLACK = 30\n    RED = 31\n    GREEN = 32\n    YELLOW = 33\n    BLUE = 34\n    MAGENTA = 35\n    CYAN = 36\n    WHITE = 37\n    RESET = 39\n\n    LIGHTBLACK_EX = 90\n    LIGHTRED_EX = 91\n    LIGHTGREEN_EX = 92\n    LIGHTYELLOW_EX = 93\n    LIGHTBLUE_EX = 94\n    LIGHTMAGENTA_EX = 95\n    LIGHTCYAN_EX = 96\n    LIGHTWHITE_EX = 97\n\n\nclass Back:\n    BLACK = 40\n    RED = 41\n    GREEN = 42\n    YELLOW = 43\n    BLUE = 44\n    MAGENTA = 45\n    CYAN = 46\n    WHITE = 47\n    RESET = 49\n\n    LIGHTBLACK_EX = 100\n    LIGHTRED_EX = 101\n    LIGHTGREEN_EX = 102\n    LIGHTYELLOW_EX = 103\n    LIGHTBLUE_EX = 104\n    LIGHTMAGENTA_EX = 105\n    LIGHTCYAN_EX = 106\n    LIGHTWHITE_EX = 107\n\n\ndef ansi_escape(codes):\n    return {name: \"\\033[%dm\" % code for name, code in codes.items()}\n\n\nclass TokenType:\n    TEXT = 1\n    ANSI = 2\n    LEVEL = 3\n    CLOSING = 4\n\n\nclass AnsiParser:\n\n    _style = ansi_escape(\n        {\n            \"b\": Style.BOLD,\n            \"d\": Style.DIM,\n            \"n\": Style.NORMAL,\n            \"h\": Style.HIDE,\n            \"i\": Style.ITALIC,\n            \"l\": Style.BLINK,\n            \"s\": Style.STRIKE,\n            \"u\": Style.UNDERLINE,\n            \"v\": Style.REVERSE,\n            \"bold\": Style.BOLD,\n            \"dim\": Style.DIM,\n            \"normal\": Style.NORMAL,\n            \"hide\": Style.HIDE,\n            \"italic\": Style.ITALIC,\n            \"blink\": Style.BLINK,\n            \"strike\": Style.STRIKE,\n            \"underline\": Style.UNDERLINE,\n            \"reverse\": Style.REVERSE,\n        }\n    )\n\n    _foreground = ansi_escape(\n        {\n            \"k\": Fore.BLACK,\n            \"r\": Fore.RED,\n            \"g\": Fore.GREEN,\n            \"y\": Fore.YELLOW,\n            \"e\": Fore.BLUE,\n            \"m\": Fore.MAGENTA,\n            \"c\": Fore.CYAN,\n            \"w\": Fore.WHITE,\n            \"lk\": Fore.LIGHTBLACK_EX,\n            \"lr\": Fore.LIGHTRED_EX,\n            \"lg\": Fore.LIGHTGREEN_EX,\n            \"ly\": Fore.LIGHTYELLOW_EX,\n            \"le\": Fore.LIGHTBLUE_EX,\n            \"lm\": Fore.LIGHTMAGENTA_EX,\n            \"lc\": Fore.LIGHTCYAN_EX,\n            \"lw\": Fore.LIGHTWHITE_EX,\n            \"black\": Fore.BLACK,\n            \"red\": Fore.RED,\n            \"green\": Fore.GREEN,\n            \"yellow\": Fore.YELLOW,\n            \"blue\": Fore.BLUE,\n            \"magenta\": Fore.MAGENTA,\n            \"cyan\": Fore.CYAN,\n            \"white\": Fore.WHITE,\n            \"light-black\": Fore.LIGHTBLACK_EX,\n            \"light-red\": Fore.LIGHTRED_EX,\n            \"light-green\": Fore.LIGHTGREEN_EX,\n            \"light-yellow\": Fore.LIGHTYELLOW_EX,\n            \"light-blue\": Fore.LIGHTBLUE_EX,\n            \"light-magenta\": Fore.LIGHTMAGENTA_EX,\n            \"light-cyan\": Fore.LIGHTCYAN_EX,\n            \"light-white\": Fore.LIGHTWHITE_EX,\n        }\n    )\n\n    _background = ansi_escape(\n        {\n            \"K\": Back.BLACK,\n            \"R\": Back.RED,\n            \"G\": Back.GREEN,\n            \"Y\": Back.YELLOW,\n            \"E\": Back.BLUE,\n            \"M\": Back.MAGENTA,\n            \"C\": Back.CYAN,\n            \"W\": Back.WHITE,\n            \"LK\": Back.LIGHTBLACK_EX,\n            \"LR\": Back.LIGHTRED_EX,\n            \"LG\": Back.LIGHTGREEN_EX,\n            \"LY\": Back.LIGHTYELLOW_EX,\n            \"LE\": Back.LIGHTBLUE_EX,\n            \"LM\": Back.LIGHTMAGENTA_EX,\n            \"LC\": Back.LIGHTCYAN_EX,\n            \"LW\": Back.LIGHTWHITE_EX,\n            \"BLACK\": Back.BLACK,\n            \"RED\": Back.RED,\n            \"GREEN\": Back.GREEN,\n            \"YELLOW\": Back.YELLOW,\n            \"BLUE\": Back.BLUE,\n            \"MAGENTA\": Back.MAGENTA,\n            \"CYAN\": Back.CYAN,\n            \"WHITE\": Back.WHITE,\n            \"LIGHT-BLACK\": Back.LIGHTBLACK_EX,\n            \"LIGHT-RED\": Back.LIGHTRED_EX,\n            \"LIGHT-GREEN\": Back.LIGHTGREEN_EX,\n            \"LIGHT-YELLOW\": Back.LIGHTYELLOW_EX,\n            \"LIGHT-BLUE\": Back.LIGHTBLUE_EX,\n            \"LIGHT-MAGENTA\": Back.LIGHTMAGENTA_EX,\n            \"LIGHT-CYAN\": Back.LIGHTCYAN_EX,\n            \"LIGHT-WHITE\": Back.LIGHTWHITE_EX,\n        }\n    )\n\n    _regex_tag = re.compile(r\"\\\\?</?((?:[fb]g\\s)?[^<>\\s]*)>\")\n\n    def __init__(self):\n        self._tokens = []\n        self._tags = []\n        self._color_tokens = []\n\n    @staticmethod\n    def strip(tokens):\n        output = \"\"\n        for type_, value in tokens:\n            if type_ == TokenType.TEXT:\n                output += value\n        return output\n\n    @staticmethod\n    def colorize(tokens, ansi_level):\n        output = \"\"\n\n        for type_, value in tokens:\n            if type_ == TokenType.LEVEL:\n                if ansi_level is None:\n                    raise ValueError(\n                        \"The '<level>' color tag is not allowed in this context, \"\n                        \"it has not yet been associated to any color value.\"\n                    )\n                value = ansi_level\n            output += value\n\n        return output\n\n    @staticmethod\n    def wrap(tokens, *, ansi_level, color_tokens):\n        output = \"\"\n\n        for type_, value in tokens:\n            if type_ == TokenType.LEVEL:\n                value = ansi_level\n            output += value\n            if type_ == TokenType.CLOSING:\n                for subtype, subvalue in color_tokens:\n                    if subtype == TokenType.LEVEL:\n                        subvalue = ansi_level\n                    output += subvalue\n\n        return output\n\n    def feed(self, text, *, raw=False):\n        if raw:\n            self._tokens.append((TokenType.TEXT, text))\n            return\n\n        position = 0\n\n        for match in self._regex_tag.finditer(text):\n            markup, tag = match.group(0), match.group(1)\n\n            self._tokens.append((TokenType.TEXT, text[position : match.start()]))\n\n            position = match.end()\n\n            if markup[0] == \"\\\\\":\n                self._tokens.append((TokenType.TEXT, markup[1:]))\n                continue\n\n            if markup[1] == \"/\":\n                if self._tags and (tag == \"\" or tag == self._tags[-1]):\n                    self._tags.pop()\n                    self._color_tokens.pop()\n                    self._tokens.append((TokenType.CLOSING, \"\\033[0m\"))\n                    self._tokens.extend(self._color_tokens)\n                    continue\n                elif tag in self._tags:\n                    raise ValueError('Closing tag \"%s\" violates nesting rules' % markup)\n                else:\n                    raise ValueError('Closing tag \"%s\" has no corresponding opening tag' % markup)\n\n            if tag in {\"lvl\", \"level\"}:\n                token = (TokenType.LEVEL, None)\n            else:\n                ansi = self._get_ansicode(tag)\n\n                if ansi is None:\n                    raise ValueError(\n                        'Tag \"%s\" does not correspond to any known ansi directive, '\n                        \"make sure you did not misspelled it (or prepend '\\\\' to escape it)\"\n                        % markup\n                    )\n\n                token = (TokenType.ANSI, ansi)\n\n            self._tags.append(tag)\n            self._color_tokens.append(token)\n            self._tokens.append(token)\n\n        self._tokens.append((TokenType.TEXT, text[position:]))\n\n    def done(self, *, strict=True):\n        if strict and self._tags:\n            faulty_tag = self._tags.pop(0)\n            raise ValueError('Opening tag \"<%s>\" has no corresponding closing tag' % faulty_tag)\n        return self._tokens\n\n    def current_color_tokens(self):\n        return list(self._color_tokens)\n\n    def _get_ansicode(self, tag):\n        style = self._style\n        foreground = self._foreground\n        background = self._background\n\n        # Substitute on a direct match.\n        if tag in style:\n            return style[tag]\n        elif tag in foreground:\n            return foreground[tag]\n        elif tag in background:\n            return background[tag]\n\n        # An alternative syntax for setting the color (e.g. <fg red>, <bg red>).\n        elif tag.startswith(\"fg \") or tag.startswith(\"bg \"):\n            st, color = tag[:2], tag[3:]\n            code = \"38\" if st == \"fg\" else \"48\"\n\n            if st == \"fg\" and color.lower() in foreground:\n                return foreground[color.lower()]\n            elif st == \"bg\" and color.upper() in background:\n                return background[color.upper()]\n            elif color.isdigit() and int(color) <= 255:\n                return \"\\033[%s;5;%sm\" % (code, color)\n            elif re.match(r\"#(?:[a-fA-F0-9]{3}){1,2}$\", color):\n                hex_color = color[1:]\n                if len(hex_color) == 3:\n                    hex_color *= 2\n                rgb = tuple(int(hex_color[i : i + 2], 16) for i in (0, 2, 4))\n                return \"\\033[%s;2;%s;%s;%sm\" % ((code,) + rgb)\n            elif color.count(\",\") == 2:\n                colors = tuple(color.split(\",\"))\n                if all(x.isdigit() and int(x) <= 255 for x in colors):\n                    return \"\\033[%s;2;%s;%s;%sm\" % ((code,) + colors)\n\n        return None\n\n\nclass ColoringMessage(str):\n    __fields__ = (\"_messages\",)\n\n    def __format__(self, spec):\n        return next(self._messages).__format__(spec)\n\n\nclass ColoredMessage:\n    def __init__(self, tokens):\n        self.tokens = tokens\n        self.stripped = AnsiParser.strip(tokens)\n\n    def colorize(self, ansi_level):\n        return AnsiParser.colorize(self.tokens, ansi_level)\n\n\nclass ColoredFormat:\n    def __init__(self, tokens, messages_color_tokens):\n        self._tokens = tokens\n        self._messages_color_tokens = messages_color_tokens\n\n    def strip(self):\n        return AnsiParser.strip(self._tokens)\n\n    def colorize(self, ansi_level):\n        return AnsiParser.colorize(self._tokens, ansi_level)\n\n    def make_coloring_message(self, message, *, ansi_level, colored_message):\n        messages = [\n            message\n            if color_tokens is None\n            else AnsiParser.wrap(\n                colored_message.tokens, ansi_level=ansi_level, color_tokens=color_tokens\n            )\n            for color_tokens in self._messages_color_tokens\n        ]\n        coloring = ColoringMessage(message)\n        coloring._messages = iter(messages)\n        return coloring\n\n\nclass Colorizer:\n    @staticmethod\n    def prepare_format(string):\n        tokens, messages_color_tokens = Colorizer._parse_without_formatting(string)\n        return ColoredFormat(tokens, messages_color_tokens)\n\n    @staticmethod\n    def prepare_message(string, args=(), kwargs={}):  # noqa: B006\n        tokens = Colorizer._parse_with_formatting(string, args, kwargs)\n        return ColoredMessage(tokens)\n\n    @staticmethod\n    def prepare_simple_message(string):\n        parser = AnsiParser()\n        parser.feed(string)\n        tokens = parser.done()\n        return ColoredMessage(tokens)\n\n    @staticmethod\n    def ansify(text):\n        parser = AnsiParser()\n        parser.feed(text.strip())\n        tokens = parser.done(strict=False)\n        return AnsiParser.colorize(tokens, None)\n\n    @staticmethod\n    def _parse_with_formatting(\n        string, args, kwargs, *, recursion_depth=2, auto_arg_index=0, recursive=False\n    ):\n        # This function re-implements Formatter._vformat()\n\n        if recursion_depth < 0:\n            raise ValueError(\"Max string recursion exceeded\")\n\n        formatter = Formatter()\n        parser = AnsiParser()\n\n        for literal_text, field_name, format_spec, conversion in formatter.parse(string):\n            parser.feed(literal_text, raw=recursive)\n\n            if field_name is not None:\n                if field_name == \"\":\n                    if auto_arg_index is False:\n                        raise ValueError(\n                            \"cannot switch from manual field \"\n                            \"specification to automatic field \"\n                            \"numbering\"\n                        )\n                    field_name = str(auto_arg_index)\n                    auto_arg_index += 1\n                elif field_name.isdigit():\n                    if auto_arg_index:\n                        raise ValueError(\n                            \"cannot switch from manual field \"\n                            \"specification to automatic field \"\n                            \"numbering\"\n                        )\n                    auto_arg_index = False\n\n                obj, _ = formatter.get_field(field_name, args, kwargs)\n                obj = formatter.convert_field(obj, conversion)\n\n                format_spec, auto_arg_index = Colorizer._parse_with_formatting(\n                    format_spec,\n                    args,\n                    kwargs,\n                    recursion_depth=recursion_depth - 1,\n                    auto_arg_index=auto_arg_index,\n                    recursive=True,\n                )\n\n                formatted = formatter.format_field(obj, format_spec)\n                parser.feed(formatted, raw=True)\n\n        tokens = parser.done()\n\n        if recursive:\n            return AnsiParser.strip(tokens), auto_arg_index\n\n        return tokens\n\n    @staticmethod\n    def _parse_without_formatting(string, *, recursion_depth=2, recursive=False):\n        if recursion_depth < 0:\n            raise ValueError(\"Max string recursion exceeded\")\n\n        formatter = Formatter()\n        parser = AnsiParser()\n\n        messages_color_tokens = []\n\n        for literal_text, field_name, format_spec, conversion in formatter.parse(string):\n            if literal_text and literal_text[-1] in \"{}\":\n                literal_text += literal_text[-1]\n\n            parser.feed(literal_text, raw=recursive)\n\n            if field_name is not None:\n                if field_name == \"message\":\n                    if recursive:\n                        messages_color_tokens.append(None)\n                    else:\n                        color_tokens = parser.current_color_tokens()\n                        messages_color_tokens.append(color_tokens)\n                field = \"{%s\" % field_name\n                if conversion:\n                    field += \"!%s\" % conversion\n                if format_spec:\n                    field += \":%s\" % format_spec\n                field += \"}\"\n                parser.feed(field, raw=True)\n\n                _, color_tokens = Colorizer._parse_without_formatting(\n                    format_spec, recursion_depth=recursion_depth - 1, recursive=True\n                )\n                messages_color_tokens.extend(color_tokens)\n\n        return parser.done(), messages_color_tokens\n",
    "loguru/_filters.py": "def filter_none(record):\n    return record[\"name\"] is not None\n\n\ndef filter_by_name(record, parent, length):\n    name = record[\"name\"]\n    if name is None:\n        return False\n    return (name + \".\")[:length] == parent\n\n\ndef filter_by_level(record, level_per_module):\n    name = record[\"name\"]\n\n    while True:\n        level = level_per_module.get(name, None)\n        if level is False:\n            return False\n        if level is not None:\n            return record[\"level\"].no >= level\n        if not name:\n            return True\n        index = name.rfind(\".\")\n        name = name[:index] if index != -1 else \"\"\n",
    "loguru/_get_frame.py": "import sys\nfrom sys import exc_info\n\n\ndef get_frame_fallback(n):\n    try:\n        raise Exception\n    except Exception:\n        frame = exc_info()[2].tb_frame.f_back\n        for _ in range(n):\n            frame = frame.f_back\n        return frame\n\n\ndef load_get_frame_function():\n    if hasattr(sys, \"_getframe\"):\n        get_frame = sys._getframe\n    else:\n        get_frame = get_frame_fallback\n    return get_frame\n\n\nget_frame = load_get_frame_function()\n",
    "loguru/_defaults.py": "from os import environ\n\n\ndef env(key, type_, default=None):\n    if key not in environ:\n        return default\n\n    val = environ[key]\n\n    if type_ == str:\n        return val\n    elif type_ == bool:\n        if val.lower() in [\"1\", \"true\", \"yes\", \"y\", \"ok\", \"on\"]:\n            return True\n        if val.lower() in [\"0\", \"false\", \"no\", \"n\", \"nok\", \"off\"]:\n            return False\n        raise ValueError(\n            \"Invalid environment variable '%s' (expected a boolean): '%s'\" % (key, val)\n        )\n    elif type_ == int:\n        try:\n            return int(val)\n        except ValueError:\n            raise ValueError(\n                \"Invalid environment variable '%s' (expected an integer): '%s'\" % (key, val)\n            ) from None\n\n\nLOGURU_AUTOINIT = env(\"LOGURU_AUTOINIT\", bool, True)\n\nLOGURU_FORMAT = env(\n    \"LOGURU_FORMAT\",\n    str,\n    \"<green>{time:YYYY-MM-DD HH:mm:ss.SSS}</green> | \"\n    \"<level>{level: <8}</level> | \"\n    \"<cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - <level>{message}</level>\",\n)\nLOGURU_FILTER = env(\"LOGURU_FILTER\", str, None)\nLOGURU_LEVEL = env(\"LOGURU_LEVEL\", str, \"DEBUG\")\nLOGURU_COLORIZE = env(\"LOGURU_COLORIZE\", bool, None)\nLOGURU_SERIALIZE = env(\"LOGURU_SERIALIZE\", bool, False)\nLOGURU_BACKTRACE = env(\"LOGURU_BACKTRACE\", bool, True)\nLOGURU_DIAGNOSE = env(\"LOGURU_DIAGNOSE\", bool, True)\nLOGURU_ENQUEUE = env(\"LOGURU_ENQUEUE\", bool, False)\nLOGURU_CATCH = env(\"LOGURU_CATCH\", bool, True)\n\nLOGURU_TRACE_NO = env(\"LOGURU_TRACE_NO\", int, 5)\nLOGURU_TRACE_COLOR = env(\"LOGURU_TRACE_COLOR\", str, \"<cyan><bold>\")\nLOGURU_TRACE_ICON = env(\"LOGURU_TRACE_ICON\", str, \"\u270f\ufe0f\")  # Pencil\n\nLOGURU_DEBUG_NO = env(\"LOGURU_DEBUG_NO\", int, 10)\nLOGURU_DEBUG_COLOR = env(\"LOGURU_DEBUG_COLOR\", str, \"<blue><bold>\")\nLOGURU_DEBUG_ICON = env(\"LOGURU_DEBUG_ICON\", str, \"\ud83d\udc1e\")  # Lady Beetle\n\nLOGURU_INFO_NO = env(\"LOGURU_INFO_NO\", int, 20)\nLOGURU_INFO_COLOR = env(\"LOGURU_INFO_COLOR\", str, \"<bold>\")\nLOGURU_INFO_ICON = env(\"LOGURU_INFO_ICON\", str, \"\u2139\ufe0f\")  # Information\n\nLOGURU_SUCCESS_NO = env(\"LOGURU_SUCCESS_NO\", int, 25)\nLOGURU_SUCCESS_COLOR = env(\"LOGURU_SUCCESS_COLOR\", str, \"<green><bold>\")\nLOGURU_SUCCESS_ICON = env(\"LOGURU_SUCCESS_ICON\", str, \"\u2714\ufe0f\")  # Heavy Check Mark\n\nLOGURU_WARNING_NO = env(\"LOGURU_WARNING_NO\", int, 30)\nLOGURU_WARNING_COLOR = env(\"LOGURU_WARNING_COLOR\", str, \"<yellow><bold>\")\nLOGURU_WARNING_ICON = env(\"LOGURU_WARNING_ICON\", str, \"\u26a0\ufe0f\")  # Warning\n\nLOGURU_ERROR_NO = env(\"LOGURU_ERROR_NO\", int, 40)\nLOGURU_ERROR_COLOR = env(\"LOGURU_ERROR_COLOR\", str, \"<red><bold>\")\nLOGURU_ERROR_ICON = env(\"LOGURU_ERROR_ICON\", str, \"\u274c\")  # Cross Mark\n\nLOGURU_CRITICAL_NO = env(\"LOGURU_CRITICAL_NO\", int, 50)\nLOGURU_CRITICAL_COLOR = env(\"LOGURU_CRITICAL_COLOR\", str, \"<RED><bold>\")\nLOGURU_CRITICAL_ICON = env(\"LOGURU_CRITICAL_ICON\", str, \"\u2620\ufe0f\")  # Skull and Crossbones\n",
    "loguru/__init__.py": "\"\"\"\nThe Loguru library provides a pre-instanced logger to facilitate dealing with logging in Python.\n\nJust ``from loguru import logger``.\n\"\"\"\nimport atexit as _atexit\nimport sys as _sys\n\nfrom . import _defaults\nfrom ._logger import Core as _Core\nfrom ._logger import Logger as _Logger\n\n__version__ = \"0.6.0\"\n\n__all__ = [\"logger\"]\n\nlogger = _Logger(\n    core=_Core(),\n    exception=None,\n    depth=0,\n    record=False,\n    lazy=False,\n    colors=False,\n    raw=False,\n    capture=True,\n    patchers=[],\n    extra={},\n)\n\nif _defaults.LOGURU_AUTOINIT and _sys.stderr:\n    logger.add(_sys.stderr)\n\n_atexit.register(logger.remove)\n",
    "docs/conf.py": "# -*- coding: utf-8 -*-\n#\n# Configuration file for the Sphinx documentation builder.\n#\n# This file does only contain a selection of the most common options. For a\n# full list see the documentation:\n# http://www.sphinx-doc.org/en/master/config\n\n# -- Path setup --------------------------------------------------------------\n\n# If extensions (or modules to document with autodoc) are in another directory,\n# add these directories to sys.path here. If the directory is relative to the\n# documentation root, use os.path.abspath to make it absolute, like shown here.\n\nimport os\nimport sys\n\nsys.path.insert(0, os.path.abspath(\"..\"))\nsys.path.insert(0, os.path.abspath(\"_extensions\"))\n\n\n# -- Project information -----------------------------------------------------\n\nproject = \"loguru\"\ncopyright = \"2018, Delgan\"\nauthor = \"Delgan\"\n\n# The short X.Y version\nversion = \"\"\n# The full version, including alpha/beta/rc tags\nrelease = \"\"\n\n\n# -- General configuration ---------------------------------------------------\n\n# If your documentation needs a minimal Sphinx version, state it here.\n#\n# needs_sphinx = '1.0'\n\n# Add any Sphinx extension module names here, as strings. They can be\n# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom\n# ones.\nextensions = [\n    \"sphinx.ext.autodoc\",\n    \"sphinx.ext.napoleon\",\n    \"sphinx.ext.viewcode\",\n    \"sphinx.ext.intersphinx\",\n    \"autodoc_stub_file\",\n]\n\n# Add any paths that contain templates here, relative to this directory.\ntemplates_path = [\"_templates\"]\n\n# The suffix(es) of source filenames.\n# You can specify multiple suffix as a list of string:\n#\n# source_suffix = ['.rst', '.md']\nsource_suffix = \".rst\"\n\n# The master toctree document.\nmaster_doc = \"index\"\n\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\n#\n# This is also used if you do content translation via gettext catalogs.\n# Usually you set \"language\" from the command line for these cases.\nlanguage = \"English\"\n\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\n# This pattern also affects html_static_path and html_extra_path .\nexclude_patterns = [\"_build\", \"Thumbs.db\", \".DS_Store\"]\n\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = \"sphinx\"\n\n# Warn about all references where the target cannot be found.\nnitpicky = True\n\n\n# -- Options for HTML output -------------------------------------------------\n\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\n#\nhtml_theme = \"sphinx_rtd_theme\"\n\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.\n#\nhtml_theme_options = {}\n\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,\n# so a file named \"default.css\" will overwrite the builtin \"default.css\".\nhtml_static_path = [\"_static\"]\n\n# Custom sidebar templates, must be a dictionary that maps document names\n# to template names.\n#\n# The default sidebars (for documents that don't match any pattern) are\n# defined by theme itself.  Builtin themes are using these templates by\n# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',\n# 'searchbox.html']``.\n#\n# html_sidebars = {}\n\n\n# -- Options for HTMLHelp output ---------------------------------------------\n\n# Output file base name for HTML help builder.\nhtmlhelp_basename = \"logurudoc\"\n\n\n# -- Options for LaTeX output ------------------------------------------------\n\nlatex_elements = {\n    # The paper size ('letterpaper' or 'a4paper').\n    #\n    # 'papersize': 'letterpaper',\n    # The font size ('10pt', '11pt' or '12pt').\n    #\n    # 'pointsize': '10pt',\n    # Additional stuff for the LaTeX preamble.\n    #\n    # 'preamble': '',\n    # Latex figure (float) alignment\n    #\n    # 'figure_align': 'htbp',\n}\n\n# Grouping the document tree into LaTeX files. List of tuples\n# (source start file, target name, title,\n#  author, documentclass [howto, manual, or own class]).\nlatex_documents = [(master_doc, \"loguru.tex\", \"loguru Documentation\", \"Delgan\", \"manual\")]\n\n\n# -- Options for manual page output ------------------------------------------\n\n# One entry per manual page. List of tuples\n# (source start file, name, description, authors, manual section).\nman_pages = [(master_doc, \"loguru\", \"loguru Documentation\", [author], 1)]\n\n\n# -- Options for Texinfo output ----------------------------------------------\n\n# Grouping the document tree into Texinfo files. List of tuples\n# (source start file, target name, title, author,\n#  dir menu entry, description, category)\ntexinfo_documents = [\n    (\n        master_doc,\n        \"loguru\",\n        \"loguru Documentation\",\n        author,\n        \"loguru\",\n        \"One line description of project.\",\n        \"Miscellaneous\",\n    )\n]\n\n\n# -- Extension configuration -------------------------------------------------\n\nhtml_context = {\"github_user\": \"delgan\", \"github_repo\": \"loguru\"}\n\nadd_module_names = False\nautodoc_member_order = \"bysource\"\nintersphinx_mapping = {\"python\": (\"https://docs.python.org/3\", None)}\nhtml_show_sourcelink = False\nhtml_show_copyright = False\nnapoleon_use_rtype = False\nnapoleon_use_ivar = True\n\n\ndef setup(app):\n    app.add_css_file(\"css/loguru.css\")\n    app.add_js_file(\"js/copybutton.js\")\n",
    "docs/_static/js/copybutton.js": "$(document).ready(function() {\n    /* Add a [>>>] button on the top-right corner of code samples to hide\n     * the >>> and ... prompts and the output and thus make the code\n     * copyable. */\n    var hig = $('.highlight-default')\n    var div = hig.find('.highlight')\n    var pre = div.find('pre');\n\n    // get the styles from the current theme\n    pre.parent().parent().css('position', 'relative');\n    var hide_text = 'Hide the prompts and output';\n    var show_text = 'Show the prompts and output';\n    var border_width = hig.css('border-top-width');\n    var border_style = hig.css('border-top-style');\n    var border_color = hig.css('border-top-color');\n    var button_styles = {\n        'cursor':'pointer', 'position': 'absolute', 'top': '0', 'right': '0',\n        'border-color': border_color, 'border-style': border_style,\n        'border-width': border_width, 'color': border_color, 'text-size': '75%',\n        'font-family': 'monospace', 'padding-left': '0.2em', 'padding-right': '0.2em',\n        'border-radius': '0', 'border-width': '0px 0px 1px 1px',\n        'line-height': '14px', 'font-size': '12px'\n    }\n\n    // create and add the button to all the code blocks that contain >>>\n    div.each(function(index) {\n        var jthis = $(this);\n        if (jthis.find('.gp').length > 0) {\n            var button = $('<span class=\"copybutton\">&gt;&gt;&gt;</span>');\n            button.css(button_styles)\n            button.attr('title', hide_text);\n            button.data('hidden', 'false');\n            jthis.prepend(button);\n        }\n        // tracebacks (.gt) contain bare text elements that need to be\n        // wrapped in a span to work with .nextUntil() (see later)\n        jthis.find('pre:has(.gt)').contents().filter(function() {\n            return ((this.nodeType == 3) && (this.data.trim().length > 0));\n        }).wrap('<span>');\n    });\n\n    // define the behavior of the button when it's clicked\n    $('.copybutton').click(function(e){\n        e.preventDefault();\n        var button = $(this);\n        if (button.data('hidden') === 'false') {\n            // hide the code output\n            button.parent().find('.go, .gp, .gt').hide();\n            button.next('pre').find('.gt').nextUntil('.gp, .go').css('visibility', 'hidden');\n            button.css('text-decoration', 'line-through');\n            button.attr('title', show_text);\n            button.data('hidden', 'true');\n        } else {\n            // show the code output\n            button.parent().find('.go, .gp, .gt').show();\n            button.next('pre').find('.gt').nextUntil('.gp, .go').css('visibility', 'visible');\n            button.css('text-decoration', 'none');\n            button.attr('title', hide_text);\n            button.data('hidden', 'false');\n        }\n    });\n});\n",
    "docs/_extensions/autodoc_stub_file.py": "\"\"\"\nSmall Sphinx extension intended to generate documentation for stub files.\n\nIt retrieves only the docstrings of \"loguru/__init__.pyi\", hence avoiding possible errors (caused by\nmissing imports or forward references). The stub file is loaded as a dummy module which contains\nonly the top-level docstring. All the formatting can therefore be handled by the \"autodoc\"\nextension, which permits cross-reference.\n\nThe docstring of the stub file should list the available type hints and add short explanation of\ntheir usage.\n\nWarning: for some reason, the docs NEEDS to be re-generated for changes in the stub file to be taken\ninto account: ``make clean && make html``.\n\"\"\"\nimport os\nimport sys\nimport types\n\n\ndef get_module_docstring(filepath):\n    with open(filepath) as file:\n        source = file.read()\n\n    co = compile(source, filepath, \"exec\")\n\n    if co.co_consts and isinstance(co.co_consts[0], str):\n        docstring = co.co_consts[0]\n    else:\n        docstring = None\n\n    return docstring\n\n\ndef setup(app):\n    module_name = \"autodoc_stub_file.loguru\"\n    dirname = os.path.dirname(os.path.abspath(__file__))\n    stub_path = os.path.join(dirname, \"..\", \"..\", \"loguru\", \"__init__.pyi\")\n    docstring = get_module_docstring(stub_path)\n    module = types.ModuleType(module_name, docstring)\n    sys.modules[module_name] = module\n"
  }
}
